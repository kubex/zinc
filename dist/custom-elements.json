{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "components/absolute-container/absolute-container.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnAbsoluteContainer",
          "slots": [
            {
              "description": "The default slot",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "domObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resize"
            },
            {
              "kind": "method",
              "name": "observerDom"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "The absolute container will take the total inner height of the content (positioned absolute), and set that\nas it's min height, Creating enough space to show the content.",
          "tagNameWithoutPrefix": "absolute-container",
          "tagName": "zn-absolute-container",
          "customElement": true,
          "jsDoc": "/**\n * @summary The absolute container will take the total inner height of the content (positioned absolute), and set that\n * as it's min height, Creating enough space to show the content.\n *\n * @documentation https://zinc.style/components/absolute-container\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot\n *\n */",
          "documentation": "https://zinc.style/components/absolute-container",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnAbsoluteContainer",
            "module": "components/absolute-container/absolute-container.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/action-bar/action-bar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnActionBar",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "action-bar",
          "tagName": "zn-action-bar",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/action-bar\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/action-bar",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnActionBar",
            "module": "components/action-bar/action-bar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/alert/alert.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnAlert",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "collapse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "collapse"
            },
            {
              "kind": "field",
              "name": "level",
              "type": {
                "text": "'primary' | 'error' | 'info' | 'success' | 'warning' | 'note'"
              },
              "default": "'info'",
              "attribute": "level"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "hideAlert",
              "privacy": "public"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "icon"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "caption"
            },
            {
              "name": "collapse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "collapse"
            },
            {
              "name": "level",
              "type": {
                "text": "'primary' | 'error' | 'info' | 'success' | 'warning' | 'note'"
              },
              "default": "'info'",
              "fieldName": "level"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "alert",
          "tagName": "zn-alert",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/alert\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/alert",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnAlert",
            "module": "components/alert/alert.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/bulk-actions/bulk-actions.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnBulkActions",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "addRule",
              "type": {
                "text": "HTMLSelectElement"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "PropertyKey"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "actions",
              "type": {
                "text": "BulkActionData"
              },
              "default": "[]",
              "attribute": "actions"
            },
            {
              "kind": "field",
              "name": "_selectedRules",
              "type": {
                "text": "Map<string, CreatedRule>"
              },
              "privacy": "private",
              "default": "new Map<string, CreatedRule>()"
            },
            {
              "kind": "field",
              "name": "_formController",
              "type": {
                "text": "FormControlController"
              },
              "privacy": "private",
              "default": "new FormControlController(this, {})"
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addRule",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event | null"
                  }
                },
                {
                  "name": "value",
                  "default": "\"\"",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event | { target: HTMLSelectElement | HTMLInputElement | HTMLDivElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_changeRule",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_removeRule",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "PropertyKey"
              },
              "fieldName": "value"
            },
            {
              "name": "actions",
              "type": {
                "text": "BulkActionData"
              },
              "default": "[]",
              "fieldName": "actions"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "bulk-actions",
          "tagName": "zn-bulk-actions",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/bulk-actions\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/bulk-actions",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnBulkActions",
            "module": "components/bulk-actions/bulk-actions.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button/button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnButton",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            },
            {
              "description": "The button's caret icon, an `<zn-icon>` element.",
              "name": "caret"
            },
            {
              "description": "The spinner that shows when the button is in the loading state.",
              "name": "spinner"
            }
          ],
          "slots": [
            {
              "description": "The button's label.",
              "name": ""
            },
            {
              "description": "A presentational prefix icon or similar element.",
              "name": "prefix"
            },
            {
              "description": "A presentational suffix icon or similar element.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-tooltip': ZnTooltip, 'zn-icon': ZnIcon }"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]')"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "'default' | 'secondary' | 'error' | 'info' | 'success' | 'warning' |\n    'transparent' | 'star'"
              },
              "default": "'default'",
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'content' | 'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "outline"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "grow"
            },
            {
              "kind": "field",
              "name": "square",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "square"
            },
            {
              "kind": "field",
              "name": "dropdownCloser",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "dropdown-closer"
            },
            {
              "kind": "field",
              "name": "notification",
              "type": {
                "text": "number"
              },
              "attribute": "notification"
            },
            {
              "kind": "field",
              "name": "verticalAlign",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "attribute": "verticalAlign"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "gaid",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "gaid"
            },
            {
              "kind": "field",
              "name": "iconPosition",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'left'",
              "attribute": "icon-position"
            },
            {
              "kind": "field",
              "name": "iconSize",
              "type": {
                "text": "string"
              },
              "attribute": "icon-size"
            },
            {
              "kind": "field",
              "name": "iconColor",
              "type": {
                "text": "IconColor"
              },
              "attribute": "icon-color"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'submit' | 'reset'"
              },
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "attribute": "form"
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": {
                "text": "string"
              },
              "attribute": "formaction"
            },
            {
              "kind": "field",
              "name": "formEnctype",
              "type": {
                "text": "'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'"
              },
              "attribute": "formenctype"
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": {
                "text": "'post' | 'get'"
              },
              "attribute": "formmethod"
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": {
                "text": "boolean"
              },
              "attribute": "formnovalidate"
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "attribute": "formtarget"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "dataTarget",
              "type": {
                "text": "'modal' | 'slide' | string"
              },
              "attribute": "data-target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "attribute": "tooltip"
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity"
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "_isLink",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_isButton",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the button loses focus.",
              "name": "zn-blur"
            },
            {
              "description": "Emitted when the button gains focus.",
              "name": "zn-focus"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "zn-invalid"
            }
          ],
          "attributes": [
            {
              "name": "color",
              "type": {
                "text": "'default' | 'secondary' | 'error' | 'info' | 'success' | 'warning' |\n    'transparent' | 'star'"
              },
              "default": "'default'",
              "fieldName": "color"
            },
            {
              "name": "size",
              "type": {
                "text": "'content' | 'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "text",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "text"
            },
            {
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "outline"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "grow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "grow"
            },
            {
              "name": "square",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "square"
            },
            {
              "name": "dropdown-closer",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "dropdownCloser"
            },
            {
              "name": "notification",
              "type": {
                "text": "number"
              },
              "fieldName": "notification"
            },
            {
              "name": "verticalAlign",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "fieldName": "verticalAlign"
            },
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "content"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "icon"
            },
            {
              "name": "gaid",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "gaid"
            },
            {
              "name": "icon-position",
              "type": {
                "text": "'left' | 'right'"
              },
              "default": "'left'",
              "fieldName": "iconPosition"
            },
            {
              "name": "icon-size",
              "type": {
                "text": "string"
              },
              "fieldName": "iconSize"
            },
            {
              "name": "icon-color",
              "type": {
                "text": "IconColor"
              },
              "fieldName": "iconColor"
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'submit' | 'reset'"
              },
              "fieldName": "type"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "fieldName": "form"
            },
            {
              "name": "formaction",
              "type": {
                "text": "string"
              },
              "fieldName": "formAction"
            },
            {
              "name": "formenctype",
              "type": {
                "text": "'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'"
              },
              "fieldName": "formEnctype"
            },
            {
              "name": "formmethod",
              "type": {
                "text": "'post' | 'get'"
              },
              "fieldName": "formMethod"
            },
            {
              "name": "formnovalidate",
              "type": {
                "text": "boolean"
              },
              "fieldName": "formNoValidate"
            },
            {
              "name": "formtarget",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "fieldName": "formTarget"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "fieldName": "target"
            },
            {
              "name": "data-target",
              "type": {
                "text": "'modal' | 'slide' | string"
              },
              "fieldName": "dataTarget"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "fieldName": "rel"
            },
            {
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "fieldName": "tooltip"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Buttons represent actions that are available to the user.",
          "tagNameWithoutPrefix": "button",
          "tagName": "zn-button",
          "customElement": true,
          "jsDoc": "/**\n * @summary Buttons represent actions that are available to the user.\n * @documentation https://inc.style/components/button\n * @status stable\n * @since 2.0\n *\n * @dependency zn-icon\n * @dependency zn-tooltip\n *\n * @event zn-blur - Emitted when the button loses focus.\n * @event zn-focus - Emitted when the button gains focus.\n * @event zn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @slot - The button's label.\n * @slot prefix - A presentational prefix icon or similar element.\n * @slot suffix - A presentational suffix icon or similar element.\n *\n * @csspart base - The component's base wrapper.\n * @csspart prefix - The container that wraps the prefix.\n * @csspart label - The button's label.\n * @csspart suffix - The container that wraps the suffix.\n * @csspart caret - The button's caret icon, an `<zn-icon>` element.\n * @csspart spinner - The spinner that shows when the button is in the loading state.\n */",
          "documentation": "https://inc.style/components/button",
          "status": "stable",
          "since": "2.0",
          "dependencies": [
            "zn-icon",
            "zn-tooltip"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnButton",
            "module": "components/button/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button-group/button-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnButtonGroup",
          "cssProperties": [
            {
              "description": "Use flex-grow to fill available space.",
              "name": "--grow"
            },
            {
              "description": "Justify content at the start of the flex space.",
              "name": "--start"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "attribute": "direction"
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "grow"
            },
            {
              "kind": "field",
              "name": "wrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "wrap"
            },
            {
              "kind": "field",
              "name": "start",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "start"
            },
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "gap"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "direction",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "fieldName": "direction"
            },
            {
              "name": "grow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "grow"
            },
            {
              "name": "wrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "wrap"
            },
            {
              "name": "start",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "start"
            },
            {
              "name": "gap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "gap"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "button-group",
          "tagName": "zn-button-group",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/button-group\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --grow - Use flex-grow to fill available space.\n * @cssproperty --start - Justify content at the start of the flex space.\n */",
          "documentation": "https://zinc.style/components/button-group",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnButtonGroup",
            "module": "components/button-group/button-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button-menu/button-menu.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnButtonMenu",
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "maxWidth",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "attribute": "max-width"
            },
            {
              "kind": "field",
              "name": "containerWidth",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "attribute": "containerWidth"
            },
            {
              "kind": "field",
              "name": "limit",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "attribute": "limit"
            },
            {
              "kind": "field",
              "name": "maxLevel",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "2",
              "attribute": "max-level"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'content' | 'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "noGap",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "attribute": "no-gap"
            },
            {
              "kind": "field",
              "name": "noPadding",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "attribute": "no-padding"
            },
            {
              "kind": "field",
              "name": "_buttons",
              "type": {
                "text": "CustomButtonWidths[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_originalButtons",
              "type": {
                "text": "CustomButtonWidths[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "watchContainerMaxWidth"
            },
            {
              "kind": "field",
              "name": "handleResize"
            },
            {
              "kind": "method",
              "name": "calculateVisibleButtons"
            },
            {
              "kind": "method",
              "name": "calculateMenuButtons",
              "parameters": [
                {
                  "name": "totalButtons",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "visibleButtons",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "buttons",
                  "type": {
                    "text": "CustomButtonWidths[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addButton",
              "privacy": "public",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "ZnButton"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setDynamicButtons",
              "privacy": "public",
              "parameters": [
                {
                  "name": "btns",
                  "type": {
                    "text": "NodeListOf<ZnButton>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeButton",
              "privacy": "public",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeAllButtons",
              "privacy": "public"
            }
          ],
          "attributes": [
            {
              "name": "max-width",
              "type": {
                "text": "number"
              },
              "fieldName": "maxWidth"
            },
            {
              "name": "containerWidth",
              "type": {
                "text": "number"
              },
              "fieldName": "containerWidth"
            },
            {
              "name": "limit",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "limit"
            },
            {
              "name": "max-level",
              "type": {
                "text": "number"
              },
              "default": "2",
              "fieldName": "maxLevel"
            },
            {
              "name": "size",
              "type": {
                "text": "'content' | 'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "no-gap",
              "type": {
                "text": "boolean"
              },
              "fieldName": "noGap"
            },
            {
              "name": "no-padding",
              "type": {
                "text": "boolean"
              },
              "fieldName": "noPadding"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Automatically hides buttons in a menu when the screen is too small.",
          "tagNameWithoutPrefix": "button-menu",
          "tagName": "zn-button-menu",
          "customElement": true,
          "jsDoc": "/**\n * @summary Automatically hides buttons in a menu when the screen is too small.\n * @documentation https://zinc.style/components/button-menu\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot.\n *\n */",
          "documentation": "https://zinc.style/components/button-menu",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnButtonMenu",
            "module": "components/button-menu/button-menu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/chart/chart.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnChart",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'area' | 'bar' | 'line'"
              },
              "default": "'bar'",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "attribute": "data"
            },
            {
              "kind": "field",
              "name": "categories",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "attribute": "categories"
            },
            {
              "kind": "field",
              "name": "xAxis",
              "type": {
                "text": "string"
              },
              "attribute": "xAxis"
            },
            {
              "kind": "field",
              "name": "datapointSize",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "d-size"
            },
            {
              "kind": "field",
              "name": "live",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "live"
            },
            {
              "kind": "field",
              "name": "dataUrl",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "data-url"
            },
            {
              "kind": "field",
              "name": "liveInterval",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "attribute": "live-interval"
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "number"
              },
              "default": "300",
              "attribute": "height",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "enableAnimations",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "enable-animations"
            },
            {
              "kind": "field",
              "name": "yAxisAppend",
              "type": {
                "text": "string"
              },
              "attribute": "y-axis-append"
            },
            {
              "kind": "field",
              "name": "chart",
              "type": {
                "text": "ApexCharts"
              },
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'area' | 'bar' | 'line'"
              },
              "default": "'bar'",
              "fieldName": "type"
            },
            {
              "name": "data",
              "type": {
                "text": "any[]"
              },
              "default": "[]",
              "fieldName": "data"
            },
            {
              "name": "categories",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "fieldName": "categories"
            },
            {
              "name": "xAxis",
              "type": {
                "text": "string"
              },
              "fieldName": "xAxis"
            },
            {
              "name": "d-size",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "datapointSize"
            },
            {
              "name": "live",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "live"
            },
            {
              "name": "data-url",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "dataUrl"
            },
            {
              "name": "live-interval",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "fieldName": "liveInterval"
            },
            {
              "name": "height",
              "type": {
                "text": "number"
              },
              "default": "300",
              "fieldName": "height"
            },
            {
              "name": "enable-animations",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "enableAnimations"
            },
            {
              "name": "y-axis-append",
              "type": {
                "text": "string"
              },
              "fieldName": "yAxisAppend"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "chart",
          "tagName": "zn-chart",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/data-chart\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/data-chart",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnChart",
            "module": "components/chart/chart.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/checkbox/checkbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnCheckbox",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The square container that wraps the checkbox's checked state.",
              "name": "control"
            },
            {
              "description": "Matches the control part when the checkbox is checked.",
              "name": "control--checked"
            },
            {
              "description": "Matches the control part when the checkbox is indeterminate.",
              "name": "control--indeterminate"
            },
            {
              "description": "The checked icon, an `<zn-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "The indeterminate icon, an `<zn-icon>` element.",
              "name": "indeterminate-icon"
            },
            {
              "description": "The container that wraps the checkbox's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the checkbox's description.",
              "name": "description"
            },
            {
              "description": "The container that wraps optional content that appears when a checkbox is checked.",
              "name": "selected-content"
            }
          ],
          "slots": [
            {
              "description": "The checkbox's label.",
              "name": ""
            },
            {
              "description": "A description of the checkbox's label. Serves as help text for a checkbox item. Alternatively, you can use the `description` attribute.",
              "name": "description"
            },
            {
              "description": "Use to nest rich content (like an input) inside a selected checkbox item. Use only with the contained style.",
              "name": "selected-content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{'zn-icon': ZnIcon}"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { value: (control: ZnCheckbox) => (control.checked ? control.value || 'on' : undefined), defaultValue: (control: ZnCheckbox) => control.defaultChecked, setValue: (control: ZnCheckbox, checked: boolean) => (control.checked = checked) })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'description')"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The checkbox's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a container around the checkbox.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies styles relevant to checkboxes in a horizontal layout.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The checkbox's help text. If you need to display HTML, use the `description` slot instead.",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSelectedContentClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear\nthe custom validation message, call this method with an empty string."
            }
          ],
          "events": [
            {
              "description": "Emitted when the checkbox loses focus.",
              "name": "zn-blur"
            },
            {
              "description": "Emitted when the checked state changes.",
              "name": "zn-change"
            },
            {
              "description": "Emitted when the checkbox gains focus.",
              "name": "zn-focus"
            },
            {
              "description": "Emitted when the checkbox receives input.",
              "name": "zn-input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "zn-invalid"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The checkbox's size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox.",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "fieldName": "indeterminate"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a container around the checkbox.",
              "fieldName": "contained"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies styles relevant to checkboxes in a horizontal layout.",
              "fieldName": "horizontal"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "fieldName": "required"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The checkbox's help text. If you need to display HTML, use the `description` slot instead.",
              "fieldName": "description"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "fieldName": "labelTooltip"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "checkbox",
          "tagName": "zn-checkbox",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/checkbox\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-icon\n *\n * @slot - The checkbox's label.\n * @slot description - A description of the checkbox's label. Serves as help text for a checkbox item. Alternatively, you can use the `description` attribute.\n *  @slot selected-content - Use to nest rich content (like an input) inside a selected checkbox item. Use only with the contained style.\n *\n * @event zn-blur - Emitted when the checkbox loses focus.\n * @event zn-change - Emitted when the checked state changes.\n * @event zn-focus - Emitted when the checkbox gains focus.\n * @event zn-input - Emitted when the checkbox receives input.\n * @event zn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @csspart base - The component's base wrapper.\n * @csspart control - The square container that wraps the checkbox's checked state.\n * @csspart control--checked - Matches the control part when the checkbox is checked.\n * @csspart control--indeterminate - Matches the control part when the checkbox is indeterminate.\n * @csspart checked-icon - The checked icon, an `<zn-icon>` element.\n * @csspart indeterminate-icon - The indeterminate icon, an `<zn-icon>` element.\n * @csspart label - The container that wraps the checkbox's label.\n * @csspart description - The container that wraps the checkbox's description.\n * @csspart selected-content - The container that wraps optional content that appears when a checkbox is checked.\n */",
          "documentation": "https://zinc.style/components/checkbox",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnCheckbox",
            "module": "components/checkbox/checkbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/checkbox-group/checkbox-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnCheckboxGroup",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            }
          ],
          "slots": [
            {
              "description": "The default slot where `<zn-checkbox>` elements are placed.",
              "name": ""
            },
            {
              "description": "The checkbox group's label. Required for proper accessibility. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.",
              "name": "label-tooltip"
            },
            {
              "description": "Text that describes how to use the checkbox group. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "protected",
              "readonly": true,
              "default": "new FormControlController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "customValidityMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "validationTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "validationInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The checkbox group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The checkbox groups's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the checkbox group, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "The current value of the checkbox group, submitted as a name/value pair with form data.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The checkbox group's size. This size will be applied to all child checkboxes.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's orientation. Changes the group's layout from the default (vertical) to horizontal.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's style. Changes the group's style from the default (plain) style to the 'contained' style. This style will be applied to all child checkboxes.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures at least one child checkbox is checked before allowing the containing form to submit.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getAllCheckboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCheckboxClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncCheckboxElements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncCheckboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateCheckboxValidity",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getValueFromCheckboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListenerToCheckboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSizeChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "default": "''"
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "description": "Emitted when the checkbox group's selected value changes.",
              "name": "zn-change"
            },
            {
              "description": "Emitted when the checkbox group receives user input.",
              "name": "zn-input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "zn-invalid"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The checkbox group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "fieldName": "labelTooltip"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The checkbox groups's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the checkbox group, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "The current value of the checkbox group, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The checkbox group's size. This size will be applied to all child checkboxes.",
              "fieldName": "size"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's orientation. Changes the group's layout from the default (vertical) to horizontal.",
              "fieldName": "horizontal"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's style. Changes the group's style from the default (plain) style to the 'contained' style. This style will be applied to all child checkboxes.",
              "fieldName": "contained"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures at least one child checkbox is checked before allowing the containing form to submit.",
              "fieldName": "required"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Shotrt summary of the component's intended use.",
          "tagNameWithoutPrefix": "checkbox-group",
          "tagName": "zn-checkbox-group",
          "customElement": true,
          "jsDoc": "/**\n * @summary Shotrt summary of the component's intended use.\n * @documentation https://zinc.style/components/checkbox-group\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot where `<zn-checkbox>` elements are placed.\n * @slot label - The checkbox group's label. Required for proper accessibility. Alternatively, you can use the `label` attribute.\n * @slot label-tooltip - Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.\n * @slot help-text - Text that describes how to use the checkbox group. Alternatively, you can use the `help-text` attribute.\n *\n * @event zn-change - Emitted when the checkbox group's selected value changes.\n * @event zn-input - Emitted when the checkbox group receives user input.\n * @event zn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @csspart form-control - The form control that wraps the label, input, and help text.\n * @csspart form-control-label - The label's wrapper.\n * @csspart form-control-input - The input's wrapper.\n * @csspart form-control-help-text - The help text's wrapper.\n */",
          "documentation": "https://zinc.style/components/checkbox-group",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnCheckboxGroup",
            "module": "components/checkbox-group/checkbox-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/chip/chip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnChip",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'info' | 'success' | 'warning' | 'error' | 'primary' |\n    'transparent' | 'custom' | 'neutral'"
              },
              "default": "'neutral'",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushX",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-x",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushY",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-y",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'action')"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "icon"
            },
            {
              "name": "type",
              "type": {
                "text": "'info' | 'success' | 'warning' | 'error' | 'primary' |\n    'transparent' | 'custom' | 'neutral'"
              },
              "default": "'neutral'",
              "fieldName": "type"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "fieldName": "size"
            },
            {
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flush"
            },
            {
              "name": "flush-x",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushX"
            },
            {
              "name": "flush-y",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushY"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "chip",
          "tagName": "zn-chip",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/chip\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/chip",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnChip",
            "module": "components/chip/chip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/collapsible/collapsible.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnCollapsible",
          "slots": [
            {
              "description": "Clicking will toggle the show state of the data",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultState",
              "type": {
                "text": "'open' | 'closed'"
              },
              "attribute": "default"
            },
            {
              "kind": "field",
              "name": "localStorage",
              "type": {
                "text": "boolean"
              },
              "attribute": "local-storage",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "storeKey",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "store-key",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "storeTtl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "store-ttl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_store",
              "type": {
                "text": "Store"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleCollapse"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "description"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "default",
              "type": {
                "text": "'open' | 'closed'"
              },
              "fieldName": "defaultState"
            },
            {
              "name": "local-storage",
              "type": {
                "text": "boolean"
              },
              "fieldName": "localStorage"
            },
            {
              "name": "store-key",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "storeKey"
            },
            {
              "name": "store-ttl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "storeTtl"
            },
            {
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flush"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Toggles between showing and hiding content when clicked",
          "tagNameWithoutPrefix": "collapsible",
          "tagName": "zn-collapsible",
          "customElement": true,
          "jsDoc": "/**\n * @summary Toggles between showing and hiding content when clicked\n * @documentation https://zinc.style/components/collapsible\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-icon - The icon element\n *\n * @slot header - Clicking will toggle the show state of the data\n *\n */",
          "documentation": "https://zinc.style/components/collapsible",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnCollapsible",
            "module": "components/collapsible/collapsible.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/cols/cols.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnCols",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "layout",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxColumns",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "mc",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noGap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-gap"
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "border"
            },
            {
              "kind": "field",
              "name": "pad",
              "type": {
                "text": "boolean"
              },
              "attribute": "pad"
            },
            {
              "kind": "field",
              "name": "padX",
              "type": {
                "text": "boolean"
              },
              "attribute": "pad-x"
            },
            {
              "kind": "field",
              "name": "padY",
              "type": {
                "text": "boolean"
              },
              "attribute": "pad-y"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "layout",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "layout"
            },
            {
              "name": "mc",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "maxColumns"
            },
            {
              "name": "no-gap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noGap"
            },
            {
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "border"
            },
            {
              "name": "pad",
              "type": {
                "text": "boolean"
              },
              "fieldName": "pad"
            },
            {
              "name": "pad-x",
              "type": {
                "text": "boolean"
              },
              "fieldName": "padX"
            },
            {
              "name": "pad-y",
              "type": {
                "text": "boolean"
              },
              "fieldName": "padY"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "cols",
          "tagName": "zn-cols",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/columns\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/columns",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnCols",
            "module": "components/cols/cols.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/confirm/confirm.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnConfirm",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-dialog': ZnDialog }"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'footer')"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'warning' | 'announcement'"
              },
              "default": "'default'",
              "description": "The dialog's theme variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The dialog's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'warning' | 'error' | 'success' | 'info'"
              },
              "default": "'warning'",
              "description": "The dialogs type, which will determine the icon and color.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicated whether of not the dialog is open. You can toggle this attribute to show and hide the dialog, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the dialog's state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "action",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "action"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "confirmText",
              "type": {
                "text": "string"
              },
              "default": "\"Confirm\"",
              "attribute": "confirmText"
            },
            {
              "kind": "field",
              "name": "cancelText",
              "type": {
                "text": "string"
              },
              "default": "\"Cancel\"",
              "attribute": "cancelText"
            },
            {
              "kind": "field",
              "name": "hideIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hide-icon"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "description": "The dialog's trigger element. This is used to open the dialog when clicked. If you do not provide a trigger, you\nwill need to manually open the dialog using the `show()` method.",
              "attribute": "trigger",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "announcement",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The Dialogs announcement text.",
              "attribute": "announcement"
            },
            {
              "kind": "field",
              "name": "footerText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The Dialogs footer text.",
              "attribute": "footer-text"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "ZnDialog"
              }
            },
            {
              "kind": "method",
              "name": "updateTriggers"
            },
            {
              "kind": "field",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            },
            {
              "kind": "method",
              "name": "submitDialog"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'warning' | 'announcement'"
              },
              "default": "'default'",
              "description": "The dialog's theme variant.",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The dialog's size.",
              "fieldName": "size"
            },
            {
              "name": "type",
              "type": {
                "text": "'warning' | 'error' | 'success' | 'info'"
              },
              "default": "'warning'",
              "description": "The dialogs type, which will determine the icon and color.",
              "fieldName": "type"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicated whether of not the dialog is open. You can toggle this attribute to show and hide the dialog, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the dialog's state.",
              "fieldName": "open"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "caption"
            },
            {
              "name": "action",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "action"
            },
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "content"
            },
            {
              "name": "confirmText",
              "type": {
                "text": "string"
              },
              "default": "\"Confirm\"",
              "fieldName": "confirmText"
            },
            {
              "name": "cancelText",
              "type": {
                "text": "string"
              },
              "default": "\"Cancel\"",
              "fieldName": "cancelText"
            },
            {
              "name": "hide-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hideIcon"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "description": "The dialog's trigger element. This is used to open the dialog when clicked. If you do not provide a trigger, you\nwill need to manually open the dialog using the `show()` method.",
              "fieldName": "trigger"
            },
            {
              "name": "announcement",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The Dialogs announcement text.",
              "fieldName": "announcement"
            },
            {
              "name": "footer-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The Dialogs footer text.",
              "fieldName": "footerText"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "confirm",
          "tagName": "zn-confirm",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/confirm-modal\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/confirm-modal",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnConfirm",
            "module": "components/confirm/confirm.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/content-block/content-block.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ContentBlock",
          "members": [
            {
              "kind": "field",
              "name": "time",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "time"
            },
            {
              "kind": "field",
              "name": "sender",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "sender"
            },
            {
              "kind": "field",
              "name": "avatar",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "avatar"
            },
            {
              "kind": "field",
              "name": "outbound",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "outbound",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "short",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "short",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "htmlNodes",
              "type": {
                "text": "Node[]"
              }
            },
            {
              "kind": "field",
              "name": "iframe",
              "type": {
                "text": "Promise<HTMLIFrameElement>"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'text', 'html')"
            },
            {
              "kind": "field",
              "name": "_textRows",
              "type": {
                "text": "TextRow[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "_collapseContent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleHtml",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "truncateText",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getTextSections",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TextRow[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "showReply",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "time",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "time"
            },
            {
              "name": "sender",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "sender"
            },
            {
              "name": "avatar",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "avatar"
            },
            {
              "name": "outbound",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "outbound"
            },
            {
              "name": "short",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "short"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "content-block",
          "tagName": "zn-content-block",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/content-block\n * @status experimental\n * @since 1.0\n */",
          "documentation": "https://zinc.style/components/content-block",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ContentBlock",
            "module": "components/content-block/content-block.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/copy-button/copy-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnCopyButton",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "copyIcon",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "successIcon",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "errorIcon",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "ZnTooltip"
              }
            },
            {
              "kind": "field",
              "name": "isCopying",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'rest' | 'success' | 'error'"
              },
              "default": "'rest'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "copyLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "copy-label"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "from",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An id that references an element in the same document from which data will be copied. If both this and `value` are\npresent, this value will take precedence. By default, the target element's `textContent` will be copied. To copy an\nattribute, append the attribute name wrapped in square brackets, e.g. `from=\"el[value]\"`. To copy a property,\nappend a dot and the property name, e.g. `from=\"el.value\"`.",
              "attribute": "from"
            },
            {
              "kind": "method",
              "name": "showStatus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "'success' | 'error'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCopy",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "copy-label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "copyLabel"
            },
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "src"
            },
            {
              "name": "from",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An id that references an element in the same document from which data will be copied. If both this and `value` are\npresent, this value will take precedence. By default, the target element's `textContent` will be copied. To copy an\nattribute, append the attribute name wrapped in square brackets, e.g. `from=\"el[value]\"`. To copy a property,\nappend a dot and the property name, e.g. `from=\"el.value\"`.",
              "fieldName": "from"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "copy-button",
          "tagName": "zn-copy-button",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/copy-button\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/copy-button",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnCopyButton",
            "module": "components/copy-button/copy-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/data-select/data-select.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDataSelect",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "select",
              "type": {
                "text": "ZnSelect"
              }
            },
            {
              "kind": "field",
              "name": "selectPrefix",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the select. Used for form submission.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the select. Used for form submission.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "provider",
              "type": {
                "text": "'color' | 'currency' | 'country' | 'phone'"
              },
              "description": "The provider of the select.",
              "attribute": "provider"
            },
            {
              "kind": "field",
              "name": "iconPosition",
              "type": {
                "text": "'start' | 'end' | 'none'"
              },
              "default": "'none'",
              "attribute": "icon-position"
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string[]"
              },
              "description": "An array of keys to use for filtering the options in the selected provider.",
              "attribute": "filter"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The selects size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "description": "Should we show the clear button",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "allowAll",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Include an \"All\" option at the top.",
              "attribute": "allow-all"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The selects label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "contextNote",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML in this text, use the `context-note` slot instead.",
              "attribute": "context-note"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the selects menu. Note that the actual placement may vary as needed to keep the listbox\ninside the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The selects help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The selects required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "protected",
              "readonly": true,
              "default": "new FormControlController(this)"
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "closeOnTab"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "field",
              "name": "handleInput"
            },
            {
              "kind": "field",
              "name": "handleClear"
            },
            {
              "kind": "method",
              "name": "getLocalProvider",
              "return": {
                "type": {
                  "text": "LocalDataProvider<DataProviderOption>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "blur"
            },
            {
              "kind": "method",
              "name": "_updatePrefix",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the select. Used for form submission.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the select. Used for form submission.",
              "fieldName": "value"
            },
            {
              "name": "provider",
              "type": {
                "text": "'color' | 'currency' | 'country' | 'phone'"
              },
              "description": "The provider of the select.",
              "fieldName": "provider"
            },
            {
              "name": "icon-position",
              "type": {
                "text": "'start' | 'end' | 'none'"
              },
              "default": "'none'",
              "fieldName": "iconPosition"
            },
            {
              "name": "filter",
              "type": {
                "text": "string[]"
              },
              "description": "An array of keys to use for filtering the options in the selected provider.",
              "fieldName": "filter"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The selects size.",
              "fieldName": "size"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "description": "Should we show the clear button",
              "fieldName": "clearable"
            },
            {
              "name": "allow-all",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Include an \"All\" option at the top.",
              "fieldName": "allowAll"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The selects label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "fieldName": "labelTooltip"
            },
            {
              "name": "context-note",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML in this text, use the `context-note` slot instead.",
              "fieldName": "contextNote"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the selects menu. Note that the actual placement may vary as needed to keep the listbox\ninside the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The selects help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The selects required attribute.",
              "fieldName": "required"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "data-select",
          "tagName": "zn-data-select",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/data-select\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/data-select",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDataSelect",
            "module": "components/data-select/data-select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/data-table/data-table.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDataTable",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-button': ZnButton, 'zn-empty-state': ZnEmptyState, 'zn-chip': ZnChip, 'zn-hover-container': ZnHoverContainer, 'zn-dropdown': ZnDropdown, 'zn-menu': ZnMenu, 'zn-menu-item': ZnMenuItem, 'zn-button-group': ZnButtonGroup, 'zn-confirm': ZnConfirm, 'zn-skeleton': ZnSkeleton, }"
            },
            {
              "kind": "field",
              "name": "dataUri",
              "type": {
                "text": "string"
              },
              "attribute": "data-uri"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "any"
              },
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sortColumn",
              "type": {
                "text": "string"
              },
              "attribute": "sort-column"
            },
            {
              "kind": "field",
              "name": "sortDirection",
              "type": {
                "text": "string"
              },
              "attribute": "sort-direction"
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter"
            },
            {
              "kind": "field",
              "name": "wideColumn",
              "type": {
                "text": "string"
              },
              "attribute": "wide-column"
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "attribute": "key"
            },
            {
              "kind": "field",
              "name": "headers",
              "type": {
                "text": "Record<string, string | HeaderConfig>"
              },
              "default": "{}",
              "attribute": "headers"
            },
            {
              "kind": "field",
              "name": "hiddenHeaders",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "attribute": "hide-headers"
            },
            {
              "kind": "field",
              "name": "hiddenColumns",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "attribute": "hide-columns"
            },
            {
              "kind": "field",
              "name": "unsortableHeaders",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "attribute": "unsortable-headers"
            },
            {
              "kind": "field",
              "name": "unsortable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "unsortable"
            },
            {
              "kind": "field",
              "name": "hidePagination",
              "type": {
                "text": "boolean"
              },
              "attribute": "hide-pagination"
            },
            {
              "kind": "field",
              "name": "standalone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "standalone"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "hideCheckboxes",
              "type": {
                "text": "boolean"
              },
              "attribute": "hide-checkboxes"
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "[]"
              },
              "default": "[]",
              "attribute": "filters"
            },
            {
              "kind": "field",
              "name": "_initialLoad",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_lastTableContent",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private",
              "default": "html``"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "itemsPerPage",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "10"
            },
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "totalPages",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rows",
              "type": {
                "text": "any[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "numberOfRowsSelected",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "selectedRows",
              "type": {
                "text": "any[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "tableContainer",
              "type": {
                "text": "Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController( this, '[default]', 'search-action', ActionSlots.delete.valueOf(), ActionSlots.modify.valueOf(), ActionSlots.create.valueOf(), ActionSlots.filter.valueOf(), ActionSlots.sort.valueOf() )"
            },
            {
              "kind": "field",
              "name": "_dataTask",
              "privacy": "private",
              "default": "new Task(this, { task: async ([dataUri], {signal}) => { let url = dataUri; const params = new URLSearchParams(); params.append('page', this.page.toString()); params.append('per_page', this.itemsPerPage.toString()); if (this.sortColumn) { params.append('sort_column', this.sortColumn); } if (this.sortDirection) { params.append('sort_direction', this.sortDirection); } if (this.filter) { params.append('filter', this.filter); } url += '?' + params.toString(); // This is also used for Rubix, so it may not work for your application. const response = await fetch(url, { signal, credentials: 'same-origin', }); if (!response.ok) throw new Error(response.statusText); return response.json(); }, args: () => [this.dataUri] })"
            },
            {
              "kind": "field",
              "name": "changeEventListener"
            },
            {
              "kind": "method",
              "name": "renderTable",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "Response"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTableHeader"
            },
            {
              "kind": "method",
              "name": "getTableFooter"
            },
            {
              "kind": "method",
              "name": "getRowsSelected"
            },
            {
              "kind": "method",
              "name": "getPagination"
            },
            {
              "kind": "method",
              "name": "getActions"
            },
            {
              "kind": "method",
              "name": "goToPage",
              "parameters": [
                {
                  "name": "page",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "goToFirstPage"
            },
            {
              "kind": "method",
              "name": "goToPreviousPage"
            },
            {
              "kind": "method",
              "name": "goToNextPage"
            },
            {
              "kind": "method",
              "name": "goToLastPage"
            },
            {
              "kind": "method",
              "name": "updateRowsPerPage",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateActionKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectRow",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearSelectedRows",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateSort",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCell",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "Cell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTableSortIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCellHeader",
              "privacy": "private",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCellBody",
              "privacy": "private",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "Cell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasHeaderPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "string | HeaderConfig"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRows",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Row[]"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "Response"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getSelectedKeys",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "(string)[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateKeys",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateModifyKeys",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateDeleteKeys",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "extractComparable",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "Cell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sortData",
              "privacy": "private",
              "parameters": [
                {
                  "name": "a",
                  "type": {
                    "text": "Cell"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "text": "Cell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadingTable",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "data-uri",
              "type": {
                "text": "string"
              },
              "fieldName": "dataUri"
            },
            {
              "name": "data",
              "type": {
                "text": "any"
              },
              "fieldName": "data"
            },
            {
              "name": "sort-column",
              "type": {
                "text": "string"
              },
              "fieldName": "sortColumn"
            },
            {
              "name": "sort-direction",
              "type": {
                "text": "string"
              },
              "fieldName": "sortDirection"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            },
            {
              "name": "wide-column",
              "type": {
                "text": "string"
              },
              "fieldName": "wideColumn"
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "fieldName": "key"
            },
            {
              "name": "headers",
              "type": {
                "text": "Record<string, string | HeaderConfig>"
              },
              "default": "{}",
              "fieldName": "headers"
            },
            {
              "name": "hide-headers",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "fieldName": "hiddenHeaders"
            },
            {
              "name": "hide-columns",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "fieldName": "hiddenColumns"
            },
            {
              "name": "unsortable-headers",
              "type": {
                "text": "string"
              },
              "default": "'{}'",
              "fieldName": "unsortableHeaders"
            },
            {
              "name": "unsortable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "unsortable"
            },
            {
              "name": "hide-pagination",
              "type": {
                "text": "boolean"
              },
              "fieldName": "hidePagination"
            },
            {
              "name": "standalone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "standalone"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "hide-checkboxes",
              "type": {
                "text": "boolean"
              },
              "fieldName": "hideCheckboxes"
            },
            {
              "name": "filters",
              "type": {
                "text": "[]"
              },
              "default": "[]",
              "fieldName": "filters"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "data-table",
          "tagName": "zn-data-table",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/data-table\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-button\n * @dependency zn-empty-state\n * @dependency zn-chip\n * @dependency zn-hover-container\n * @dependency zn-dropdown\n * @dependency zn-menu\n * @dependency zn-menu-item\n * @dependency zn-button-group\n * @dependency zn-confirm\n * @dependency zn-skeleton\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/data-table",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-button",
            "zn-empty-state",
            "zn-chip",
            "zn-hover-container",
            "zn-dropdown",
            "zn-menu",
            "zn-menu-item",
            "zn-button-group",
            "zn-confirm",
            "zn-skeleton"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDataTable",
            "module": "components/data-table/data-table.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/data-table-filter/data-table-filter.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDataTableFilter",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_formController",
              "type": {
                "text": "FormControlController"
              },
              "privacy": "private",
              "default": "new FormControlController(this, {})"
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "filters"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"data-table-filter\"",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleQBClear"
            },
            {
              "kind": "field",
              "name": "handleQBReset"
            },
            {
              "kind": "field",
              "name": "handleQBUpdate"
            },
            {
              "kind": "method",
              "name": "closeSlideout"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "filters",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "filters"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"data-table-filter\"",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "data-table-filter",
          "tagName": "zn-data-table-filter",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/data-table-filter\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/data-table-filter",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDataTableFilter",
            "module": "components/data-table-filter/data-table-filter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/data-table-sort/data-table-sort.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDataTableSort",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "data-table-sort",
          "tagName": "zn-data-table-sort",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/data-table-sort\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/data-table-sort",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDataTableSort",
            "module": "components/data-table-sort/data-table-sort.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/datepicker/datepicker.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDatepicker",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-icon': ZnIcon, 'zn-tooltip': ZnTooltip }"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: ['zn-blur', 'zn-input'] })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label', 'label-tooltip')"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The inputs size *",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The inputs label. If you need to display HTML, use the `label` slot. *",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the\n`label-tooltip` slot.\n*",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "contextNote",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML\nin this text, use the `context-note` slot instead",
              "attribute": "context-note"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead. *",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input *",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input read-only *",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "By default, form-controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be\nin the same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "range",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a range picker. *",
              "attribute": "range"
            },
            {
              "kind": "field",
              "name": "_instance",
              "type": {
                "text": "AirDatepicker<HTMLInputElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks the validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "init"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The inputs size *",
              "fieldName": "size"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The inputs label. If you need to display HTML, use the `label` slot. *",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the\n`label-tooltip` slot.\n*",
              "fieldName": "labelTooltip"
            },
            {
              "name": "context-note",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML\nin this text, use the `context-note` slot instead",
              "fieldName": "contextNote"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead. *",
              "fieldName": "helpText"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input *",
              "fieldName": "disabled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input read-only *",
              "fieldName": "readonly"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "By default, form-controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be\nin the same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "range",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a range picker. *",
              "fieldName": "range"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "datepicker",
          "tagName": "zn-datepicker",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/datepicker\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/datepicker",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDatepicker",
            "module": "components/datepicker/datepicker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/defined-label/defined-label.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDefinedLabel",
          "cssParts": [
            {
              "description": "The component's main input.",
              "name": "input"
            },
            {
              "description": "The label's value inputs.",
              "name": "input-value"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { value: (control: this) => control.value + (control.inputValue ? `:${control.inputValue}` : ''), })"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "ZnInput"
              }
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "ZnDropdown"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "inputValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "inputValue"
            },
            {
              "kind": "field",
              "name": "inputSize",
              "type": {
                "text": "'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "input-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'label'",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "allowCustom",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "allow-custom"
            },
            {
              "kind": "field",
              "name": "predefinedLabels",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "predefined-labels"
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputValueChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputValueInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFormSubmit",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "inputValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "inputValue"
            },
            {
              "name": "input-size",
              "type": {
                "text": "'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "inputSize"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'label'",
              "fieldName": "name"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "fieldName": "title"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "allow-custom",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "allowCustom"
            },
            {
              "name": "predefined-labels",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "predefinedLabels"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "This component provides a labeled input with support for predefined and custom labels,\nallowing users to select or enter label-value pairs within a dropdown interface.",
          "tagNameWithoutPrefix": "defined-label",
          "tagName": "zn-defined-label",
          "customElement": true,
          "jsDoc": "/**\n * @summary This component provides a labeled input with support for predefined and custom labels,\n * allowing users to select or enter label-value pairs within a dropdown interface.\n * @documentation https://zinc.style/components/defined-label\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-button\n * @dependency zn-dropdown\n * @dependency zn-input\n * @dependency zn-option\n * @dependency zn-panel\n * @dependency zn-select\n * @dependency zn-sp\n *\n * @csspart input - The component's main input.\n * @csspart input-value - The label's value inputs.\n */",
          "documentation": "https://zinc.style/components/defined-label",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-button",
            "zn-dropdown",
            "zn-input",
            "zn-option",
            "zn-panel",
            "zn-select",
            "zn-sp"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDefinedLabel",
            "module": "components/defined-label/defined-label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dialog/dialog.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDialog",
          "cssProperties": [
            {
              "description": "The preferred width of the dialog. Note the dialog will shrink to accommodate smaller screens.",
              "name": "--width"
            },
            {
              "description": "The amount of padding to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "The amount of padding to use for the body.",
              "name": "--body-spacing"
            },
            {
              "description": "The amount of padding to use for the footer.",
              "name": "--footer-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The dialog's header. This element wraps the title and header actions.",
              "name": "header"
            },
            {
              "description": "Optional actions to add to the header. Works best with `<zn-button>` elements.",
              "name": "header-actions"
            },
            {
              "description": "The dialog's title.",
              "name": "title"
            },
            {
              "description": "The dialog's close button.",
              "name": "close-button"
            },
            {
              "description": "The close buttons exported `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "The dialog's body.",
              "name": "body"
            },
            {
              "description": "The dialog's footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The dialog's label. Alternatively you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Optional icon to add to the left of the dialog's label (title). A color will be applied to the icon depending on the dialog variant.",
              "name": "header-icon"
            },
            {
              "description": "Optional Intro text to display below the icon, when using the variant `announcement`.",
              "name": "announcement-intro"
            },
            {
              "description": "Optional actions to add to the header. Works best with `<zn-button>` elements.",
              "name": "header-actions"
            },
            {
              "description": "The dialog's footer. This is typically used for buttons representing various options.",
              "name": "footer"
            },
            {
              "description": "Optional text to include below the footer buttons, when using the variant `announcement`.",
              "name": "footer-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-button': ZnButton }"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'footer')"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'warning' | 'announcement'"
              },
              "default": "'default'",
              "description": "The dialog's theme variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The dialog's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicated whether of not the dialog is open. You can toggle this attribute to show and hide the dialog, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the dialog's state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way to close the dialog.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "description": "The dialog's trigger element. This is used to open the dialog when clicked. If you do not provide a trigger, you\nwill need to manually open the dialog using the `show()` method.",
              "attribute": "trigger",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "'close-button' | 'keyboard' | 'overlay'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dialog."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dialog."
            },
            {
              "kind": "field",
              "name": "closeClickHandler",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the dialog is opens.",
              "name": "zn-show"
            },
            {
              "description": "Emitted when the dialog is closed.",
              "name": "zn-close"
            },
            {
              "type": {
                "text": "{ source: 'close-button' | 'keyboard' | 'overlay' }"
              },
              "description": "Emitted when the user attempts to close the dialog by clicking the close button, clicking the overlay, or pressing escape. Calling `event.preventDefault()` will keep the dialog open. Avoid using this unless closing the dialog will result in destructive behavior such as data loss.",
              "name": "zn-request-close"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'warning' | 'announcement'"
              },
              "default": "'default'",
              "description": "The dialog's theme variant.",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The dialog's size.",
              "fieldName": "size"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicated whether of not the dialog is open. You can toggle this attribute to show and hide the dialog, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the dialog's state.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way to close the dialog.",
              "fieldName": "noHeader"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "description": "The dialog's trigger element. This is used to open the dialog when clicked. If you do not provide a trigger, you\nwill need to manually open the dialog using the `show()` method.",
              "fieldName": "trigger"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "dialog",
          "tagName": "zn-dialog",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/dialog\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-button\n *\n * @event zn-show - Emitted when the dialog is opens.\n * @event zn-close - Emitted when the dialog is closed.\n * @event {{ source: 'close-button' | 'keyboard' | 'overlay' }} zn-request-close - Emitted when the user attempts to\n * close the dialog by clicking the close button, clicking the overlay, or pressing escape. Calling\n * `event.preventDefault()` will keep the dialog open. Avoid using this unless closing the dialog will result in\n * destructive behavior such as data loss.\n *\n * @slot - The default slot.\n * @slot label - The dialog's label. Alternatively you can use the `label` attribute.\n * @slot header-icon - Optional icon to add to the left of the dialog's label (title). A color will be applied\n * to the icon depending on the dialog variant.\n * @slot announcement-intro - Optional Intro text to display below the icon, when using the variant `announcement`.\n * @slot header-actions - Optional actions to add to the header. Works best with `<zn-button>` elements.\n * @slot footer - The dialog's footer. This is typically used for buttons representing various options.\n * @slot footer-text - Optional text to include below the footer buttons, when using the variant `announcement`.\n *\n * @csspart base - The component's base wrapper.\n * @csspart header - The dialog's header. This element wraps the title and header actions.\n * @csspart header-actions - Optional actions to add to the header. Works best with `<zn-button>` elements.\n * @csspart title - The dialog's title.\n * @csspart close-button - The dialog's close button.\n * @csspart close-button__base - The close buttons exported `base` part.\n * @csspart body - The dialog's body.\n * @csspart footer - The dialog's footer.\n *\n * @cssproperty --width - The preferred width of the dialog. Note the dialog will shrink to accommodate smaller screens.\n * @cssproperty --header-spacing - The amount of padding to use for the header.\n * @cssproperty --body-spacing - The amount of padding to use for the body.\n * @cssproperty --footer-spacing - The amount of padding to use for the footer.\n */",
          "documentation": "https://zinc.style/components/dialog",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-button"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDialog",
            "module": "components/dialog/dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown/dropdown.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnDropdown",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "ZnPopup"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether the dropdown is open",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' |\n    'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The placement of the dropdown. Note the actual placement may vary based on the available space",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable the dropdown",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stayOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown will close when an item is selected. Set this to true to keep the dropdown open",
              "attribute": "stay-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "containingElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The dropdown will close when the user interacts outside the element*"
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from the trigger",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from the trigger",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enable this option if the parent is overflow hidden and the dropdown is not visible",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both' | undefined"
              },
              "default": "undefined",
              "description": "Syncs the popup width or height with the trigger element",
              "attribute": "sync",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "uri",
              "type": {
                "text": "string"
              },
              "attribute": "uri"
            },
            {
              "kind": "field",
              "name": "fetchedContent",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "fetchedContent"
            },
            {
              "kind": "method",
              "name": "focusOnTrigger",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "getMenu",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handlePanelSelect",
              "description": "Events"
            },
            {
              "kind": "method",
              "name": "preloadContent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handlePreload",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTriggerClick"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyUp",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDocumentMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Opens the dropdown"
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Closes the dropdown"
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Instructs the dropdown to reposition itself"
            },
            {
              "kind": "method",
              "name": "updateAccessibleTrigger",
              "privacy": "private",
              "description": "Aria related method"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether the dropdown is open",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' |\n    'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The placement of the dropdown. Note the actual placement may vary based on the available space",
              "fieldName": "placement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable the dropdown",
              "fieldName": "disabled"
            },
            {
              "name": "stay-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown will close when an item is selected. Set this to true to keep the dropdown open",
              "fieldName": "stayOpenOnSelect"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from the trigger",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from the trigger",
              "fieldName": "skidding"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enable this option if the parent is overflow hidden and the dropdown is not visible",
              "fieldName": "hoist"
            },
            {
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both' | undefined"
              },
              "default": "undefined",
              "description": "Syncs the popup width or height with the trigger element",
              "fieldName": "sync"
            },
            {
              "name": "uri",
              "type": {
                "text": "string"
              },
              "fieldName": "uri"
            },
            {
              "name": "fetchedContent",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "fetchedContent"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "dropdown",
          "tagName": "zn-dropdown",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/dropdown\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/dropdown",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnDropdown",
            "module": "components/dropdown/dropdown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/editor/editor.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnEditor",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "default": "new FormControlController(this, {})"
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "editorHtml",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "interactionType",
              "type": {
                "text": "'ticket' | 'chat'"
              },
              "default": "'chat'",
              "attribute": "interaction-type"
            },
            {
              "kind": "field",
              "name": "cannedResponses",
              "type": {
                "text": "any[]"
              },
              "attribute": "canned-responses"
            },
            {
              "kind": "field",
              "name": "cannedResponsesUri",
              "type": {
                "text": "string"
              },
              "attribute": "canned-responses-url"
            },
            {
              "kind": "field",
              "name": "uploadAttachmentUrl",
              "type": {
                "text": "string"
              },
              "attribute": "attachment-url"
            },
            {
              "kind": "field",
              "name": "quillElement",
              "type": {
                "text": "Quill"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commands",
              "type": {
                "text": "CannedResponse[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTextChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateIcons",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getQuillKeyboardBindings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_supplyPlaceholderDialog",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setupTitleAttributes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "quill",
                  "type": {
                    "text": "Quill"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_fetchCannedResponses",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "interaction-type",
              "type": {
                "text": "'ticket' | 'chat'"
              },
              "default": "'chat'",
              "fieldName": "interactionType"
            },
            {
              "name": "canned-responses",
              "type": {
                "text": "any[]"
              },
              "fieldName": "cannedResponses"
            },
            {
              "name": "canned-responses-url",
              "type": {
                "text": "string"
              },
              "fieldName": "cannedResponsesUri"
            },
            {
              "name": "attachment-url",
              "type": {
                "text": "string"
              },
              "fieldName": "uploadAttachmentUrl"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "editor",
          "tagName": "zn-editor",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/editor\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/editor",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnEditor",
            "module": "components/editor/editor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/empty-state/empty-state.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnEmptyState",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'error' | 'info' | 'primary' | ''"
              },
              "default": "''",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "icon"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "description"
            },
            {
              "name": "type",
              "type": {
                "text": "'error' | 'info' | 'primary' | ''"
              },
              "default": "''",
              "fieldName": "type"
            },
            {
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "padded"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "empty-state",
          "tagName": "zn-empty-state",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/empty-state\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/empty-state",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnEmptyState",
            "module": "components/empty-state/empty-state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/expanding-action/expanding-action.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnExpandingAction",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "method",
              "type": {
                "text": "'drop' | 'fill'"
              },
              "default": "'drop'",
              "attribute": "method"
            },
            {
              "kind": "field",
              "name": "contextUri",
              "type": {
                "text": "string"
              },
              "attribute": "context-uri",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "string"
              },
              "attribute": "count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "attribute": "color",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "prefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "prefetch"
            },
            {
              "kind": "field",
              "name": "basis",
              "type": {
                "text": "string"
              },
              "default": "'300'",
              "attribute": "basis"
            },
            {
              "kind": "field",
              "name": "maxHeight",
              "type": {
                "text": "string"
              },
              "attribute": "max-height"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "masterId",
              "type": {
                "text": "string"
              },
              "attribute": "master-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fetchStyle",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "fetch-style",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noPrefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-prefetch",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_panel",
              "type": {
                "text": "Element | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_panels",
              "type": {
                "text": "Map<string, Element[]>"
              },
              "privacy": "private",
              "default": "new Map<string, Element[]>()"
            },
            {
              "kind": "field",
              "name": "_knownUri",
              "type": {
                "text": "Map<string, string>"
              },
              "privacy": "private",
              "default": "new Map<string, string>()"
            },
            {
              "kind": "field",
              "name": "_actions",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_preload",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_countObserver",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_colorObserver",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_observeMetaData"
            },
            {
              "kind": "method",
              "name": "_registerActions"
            },
            {
              "kind": "method",
              "name": "_addAction",
              "parameters": [
                {
                  "name": "action",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_uriToId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "actionUri",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createUriPanel",
              "return": {
                "type": {
                  "text": "HTMLDivElement"
                }
              },
              "parameters": [
                {
                  "name": "actionEle",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "actionUri",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "actionId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fetchUri",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fetchContextHeaders"
            },
            {
              "kind": "method",
              "name": "clickAction",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleIconClicked"
            },
            {
              "kind": "field",
              "name": "handleIconCloseClicked"
            },
            {
              "kind": "method",
              "name": "renderDropdown",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderFill",
              "privacy": "protected"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "fieldName": "icon"
            },
            {
              "name": "method",
              "type": {
                "text": "'drop' | 'fill'"
              },
              "default": "'drop'",
              "fieldName": "method"
            },
            {
              "name": "context-uri",
              "type": {
                "text": "string"
              },
              "fieldName": "contextUri"
            },
            {
              "name": "count",
              "type": {
                "text": "string"
              },
              "fieldName": "count"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "fieldName": "color"
            },
            {
              "name": "prefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "prefetch"
            },
            {
              "name": "basis",
              "type": {
                "text": "string"
              },
              "default": "'300'",
              "fieldName": "basis"
            },
            {
              "name": "max-height",
              "type": {
                "text": "string"
              },
              "fieldName": "maxHeight"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "master-id",
              "type": {
                "text": "string"
              },
              "fieldName": "masterId"
            },
            {
              "name": "fetch-style",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "fetchStyle"
            },
            {
              "name": "no-prefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noPrefetch"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "expanding-action",
          "tagName": "zn-expanding-action",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/expanding-action\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/expanding-action",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnExpandingAction",
            "module": "components/expanding-action/expanding-action.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/file/file.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnFile",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The wrapper around the button and text value.",
              "name": "button-wrapper"
            },
            {
              "description": "The zn-button acting as a file input.",
              "name": "button"
            },
            {
              "description": "The zn-button's exported `base` part.",
              "name": "button__base"
            },
            {
              "description": "The chosen files or placeholder text for the file input.",
              "name": "value"
            },
            {
              "description": "The element wrapping the drop zone.",
              "name": "droparea"
            },
            {
              "description": "The background of the drop zone.",
              "name": "droparea-background"
            },
            {
              "description": "The container that wraps the icon for the drop zone.",
              "name": "droparea-icon"
            },
            {
              "description": "The text for the drop zone.",
              "name": "droparea-value"
            },
            {
              "description": "The container that wraps the trigger.",
              "name": "trigger"
            }
          ],
          "slots": [
            {
              "description": "The file control's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Text that describes how to use the file control. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            },
            {
              "description": "Optional droparea icon to use instead of the default. Works best with `<zn-icon>`.",
              "name": "droparea-icon"
            },
            {
              "description": "Optional content to be used as trigger instead of the default content. Opening the file dialog on click and as well as drag and drop will work for this content. Following attributes will no longer work: *label*, *droparea*, *help-text*, *size*, *hide-value*. Also if using the disabled attribute, the disabled styling will not be applied and must be taken care of yourself.",
              "name": "trigger"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: ['zn-change'], value: (el: ZnFile) => el.files })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "userIsDragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "ZnButton"
              }
            },
            {
              "kind": "field",
              "name": "dropareaWrapper",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "dropareaIcon",
              "type": {
                "text": "HTMLSpanElement"
              }
            },
            {
              "kind": "field",
              "name": "inputChosen",
              "type": {
                "text": "HTMLSpanElement"
              }
            },
            {
              "kind": "field",
              "name": "files",
              "description": "The selected files as a FileList object containing a list of File objects.\nThe FileList behaves like an array, so you can get the number of selected files\nvia its length property.\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#getting_information_on_selected_files)",
              "attribute": "files"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the file control, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value of the file control contains a string that represents the path of the selected file.\nIf multiple files are selected, the value represents the first file in the list.\nIf no file is selected, the value is an empty string.\nBeware that the only valid value when setting a file control is an empty string!\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#value)",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The file control's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The file control's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If this is set, then the only way to remove files is to click the cross next to them.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The file control's help text.\nIf you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the file control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "droparea",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draw the file control as a drop area",
              "attribute": "droparea"
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Comma separated list of supported file types\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept)",
              "attribute": "accept"
            },
            {
              "kind": "field",
              "name": "capture",
              "type": {
                "text": "'user' | 'environment'"
              },
              "description": "Specifies the types of files that the server accepts.\nCan be set either to user or environment.\nWorks only when not using a droparea!\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/capture)",
              "attribute": "capture"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether the user can select more than one file.\nHas no effect if webkitdirectory is set.\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple)",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "webkitdirectory",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that the file control should let the user select directories instead of files.\nWhen a directory is selected, the directory and its entire hierarchy of contents are included\nin the set of selected items.\nNote: This is a non-standard attribute but is supported in the major browsers.\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory)",
              "attribute": "webkitdirectory",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element.\nThis attribute allows you to place the form control outside of a form and associate it\nwith the form that has this `id`. The form must be in the same document\nor shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Suppress the value from being displayed in the file control",
              "attribute": "hide-value"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message.\nReturns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button or droparea."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button or droparea."
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFiles",
              "privacy": "private",
              "parameters": [
                {
                  "name": "files",
                  "type": {
                    "text": "FileList | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTransferItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<FileList>"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "DataTransferItemList | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getFilesFromEntry",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<File[]>"
                }
              },
              "parameters": [
                {
                  "name": "entry",
                  "type": {
                    "text": "FileSystemEntry | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles the change event of the native input"
            },
            {
              "kind": "field",
              "name": "handleDragOver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDragLeave",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDrop",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "description": "Handle the focus of the droparea and emit focus event"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "description": "Handle the blur of the droparea and emit blur event"
            },
            {
              "kind": "field",
              "name": "removeFile",
              "privacy": "private",
              "description": "Remove a file from the list of files"
            },
            {
              "kind": "method",
              "name": "renderFileValueWithDelete",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLTemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderDroparea",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLTemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLTemplateResult"
                }
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "zn-blur"
            },
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "zn-change"
            },
            {
              "description": "Emitted when multiple files are selected via drag and drop, without the `multiple` property being set.",
              "name": "zn-error"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "zn-focus"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "zn-input"
            }
          ],
          "attributes": [
            {
              "name": "files",
              "description": "The selected files as a FileList object containing a list of File objects.\nThe FileList behaves like an array, so you can get the number of selected files\nvia its length property.\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#getting_information_on_selected_files)",
              "fieldName": "files"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the file control, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "description": "The value of the file control contains a string that represents the path of the selected file.\nIf multiple files are selected, the value represents the first file in the list.\nIf no file is selected, the value is an empty string.\nBeware that the only valid value when setting a file control is an empty string!\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#value)",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The file control's size.",
              "fieldName": "size"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The file control's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If this is set, then the only way to remove files is to click the cross next to them.",
              "fieldName": "clearable"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The file control's help text.\nIf you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the file control.",
              "fieldName": "disabled"
            },
            {
              "name": "droparea",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draw the file control as a drop area",
              "fieldName": "droparea"
            },
            {
              "name": "accept",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Comma separated list of supported file types\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept)",
              "fieldName": "accept"
            },
            {
              "name": "capture",
              "type": {
                "text": "'user' | 'environment'"
              },
              "description": "Specifies the types of files that the server accepts.\nCan be set either to user or environment.\nWorks only when not using a droparea!\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/capture)",
              "fieldName": "capture"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether the user can select more than one file.\nHas no effect if webkitdirectory is set.\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple)",
              "fieldName": "multiple"
            },
            {
              "name": "webkitdirectory",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that the file control should let the user select directories instead of files.\nWhen a directory is selected, the directory and its entire hierarchy of contents are included\nin the set of selected items.\nNote: This is a non-standard attribute but is supported in the major browsers.\n[see MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory)",
              "fieldName": "webkitdirectory"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element.\nThis attribute allows you to place the form control outside of a form and associate it\nwith the form that has this `id`. The form must be in the same document\nor shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "hide-value",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Suppress the value from being displayed in the file control",
              "fieldName": "hideValue"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "File controls allow selecting an arbitrary number of files for uploading.",
          "tagNameWithoutPrefix": "file",
          "tagName": "zn-file",
          "customElement": true,
          "jsDoc": "/**\n * @summary File controls allow selecting an arbitrary number of files for uploading.\n * @documentation https://zinc.style/components/drag-upload\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-button\n * @dependency zn-icon\n *\n * @slot label - The file control's label. Alternatively, you can use the `label` attribute.\n * @slot help-text - Text that describes how to use the file control.\n *    Alternatively, you can use the `help-text` attribute.\n * @slot droparea-icon - Optional droparea icon to use instead of the default.\n *    Works best with `<zn-icon>`.\n * @slot trigger - Optional content to be used as trigger instead of the default content.\n *    Opening the file dialog on click and as well as drag and drop will work for this content.\n *    Following attributes will no longer work: *label*, *droparea*, *help-text*, *size*,\n *    *hide-value*. Also if using the disabled attribute, the disabled styling will not be\n *    applied and must be taken care of yourself.\n *\n * @event zn-blur - Emitted when the control loses focus.\n * @event zn-change - Emitted when an alteration to the control's value is committed by the user.\n * @event zn-error - Emitted when multiple files are selected via drag and drop, without\n * the `multiple` property being set.\n * @event zn-focus - Emitted when the control gains focus.\n * @event zn-input - Emitted when the control receives input.\n *\n * @csspart form-control - The form control that wraps the label, input, and help text.\n * @csspart form-control-label - The label's wrapper.\n * @csspart form-control-input - The input's wrapper.\n * @csspart form-control-help-text - The help text's wrapper.\n * @csspart button-wrapper - The wrapper around the button and text value.\n * @csspart button - The zn-button acting as a file input.\n * @csspart button__base - The zn-button's exported `base` part.\n * @csspart value - The chosen files or placeholder text for the file input.\n * @csspart droparea - The element wrapping the drop zone.\n * @csspart droparea-background - The background of the drop zone.\n * @csspart droparea-icon - The container that wraps the icon for the drop zone.\n * @csspart droparea-value - The text for the drop zone.\n * @csspart trigger - The container that wraps the trigger.\n *\n * @animation file.iconDrop - The animation to use for the file icon\n * when a file is dropped\n * @animation file.text.disappear - The disappear animation to use for the file placeholder text\n * when a file is dropped\n * @animation file.text.appear - The appear animation to use for the file placeholder text\n * when a file is dropped\n */",
          "documentation": "https://zinc.style/components/drag-upload",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-button",
            "zn-icon"
          ],
          "animations": [
            {
              "name": "file.iconDrop",
              "description": "The animation to use for the file icon when a file is dropped"
            },
            {
              "name": "file.text.disappear",
              "description": "The disappear animation to use for the file placeholder text when a file is dropped"
            },
            {
              "name": "file.text.appear",
              "description": "The appear animation to use for the file placeholder text when a file is dropped"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnFile",
            "module": "components/file/file.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/form-group/form-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnFormGroup",
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot\ninstead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the\n`label-tooltip` slot instead.",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form groups help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot\ninstead.",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the\n`label-tooltip` slot instead.",
              "fieldName": "labelTooltip"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form groups help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "form-group",
          "tagName": "zn-form-group",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/form-group\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot.\n *\n */",
          "documentation": "https://zinc.style/components/form-group",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnFormGroup",
            "module": "components/form-group/form-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/header/header.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnHeader",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'nav', 'breadcrumb')"
            },
            {
              "kind": "field",
              "name": "fullLocation",
              "type": {
                "text": "string"
              },
              "attribute": "full-location"
            },
            {
              "kind": "field",
              "name": "entityId",
              "type": {
                "text": "string"
              },
              "attribute": "entity-id"
            },
            {
              "kind": "field",
              "name": "entityIdShow",
              "type": {
                "text": "boolean"
              },
              "attribute": "entity-id-show"
            },
            {
              "kind": "field",
              "name": "transparent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "transparent"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "navigation",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "navigation"
            },
            {
              "kind": "field",
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "attribute": "full-width"
            },
            {
              "kind": "field",
              "name": "previousPath",
              "type": {
                "text": "string"
              },
              "attribute": "previous-path"
            },
            {
              "kind": "field",
              "name": "previousTarget",
              "type": {
                "text": "string"
              },
              "attribute": "previous-target"
            },
            {
              "kind": "field",
              "name": "navbar",
              "type": {
                "text": "ZnNavbar"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleAltPress"
            },
            {
              "kind": "field",
              "name": "handleAltUp"
            },
            {
              "kind": "method",
              "name": "updateNav"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "full-location",
              "type": {
                "text": "string"
              },
              "fieldName": "fullLocation"
            },
            {
              "name": "entity-id",
              "type": {
                "text": "string"
              },
              "fieldName": "entityId"
            },
            {
              "name": "entity-id-show",
              "type": {
                "text": "boolean"
              },
              "fieldName": "entityIdShow"
            },
            {
              "name": "transparent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "transparent"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "fieldName": "description"
            },
            {
              "name": "navigation",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "navigation"
            },
            {
              "name": "full-width",
              "type": {
                "text": "boolean"
              },
              "fieldName": "fullWidth"
            },
            {
              "name": "previous-path",
              "type": {
                "text": "string"
              },
              "fieldName": "previousPath"
            },
            {
              "name": "previous-target",
              "type": {
                "text": "string"
              },
              "fieldName": "previousTarget"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "header",
          "tagName": "zn-header",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/header\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/header",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnHeader",
            "module": "components/header/header.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/hover-container/hover-container.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnHoverContainer",
          "slots": [
            {
              "description": "The content of the hover-container",
              "name": ""
            },
            {
              "description": "The anchor the hover-container is attached to.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "Popup"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' |\n    'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "4",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "attribute": "trigger"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "hoist"
            },
            {
              "kind": "method",
              "name": "hasTrigger",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggerType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            }
          ],
          "events": [
            {
              "description": "Emitted when the hover-container is shown.",
              "name": "zn-show"
            },
            {
              "description": "Emitted after the hover-container is shown.",
              "name": "zn-after-show"
            },
            {
              "description": "Emitted when the hover-container is hidden.",
              "name": "zn-hide"
            },
            {
              "description": "Emitted after the hover-container is hidden.",
              "name": "zn-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "content"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' |\n    'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "fieldName": "placement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "4",
              "fieldName": "distance"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "skidding"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "fieldName": "trigger"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "The HoverContainer component is used to display additional information when a user hovers over or clicks\non an element.",
          "tagNameWithoutPrefix": "hover-container",
          "tagName": "zn-hover-container",
          "customElement": true,
          "jsDoc": "/**\n * @summary The HoverContainer component is used to display additional information when a user hovers over or clicks\n * on an element.\n *\n * @documentation https://zinc.style/components/hover-container\n * @status experimental\n * @since 1.0\n *\n * @event zn-show - Emitted when the hover-container is shown.\n * @event zn-after-show - Emitted after the hover-container is shown.\n * @event zn-hide - Emitted when the hover-container is hidden.\n * @event zn-after-hide - Emitted after the hover-container is hidden.\n *\n * @slot - The content of the hover-container\n * @slot anchor - The anchor the hover-container is attached to.\n */",
          "documentation": "https://zinc.style/components/hover-container",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnHoverContainer",
            "module": "components/hover-container/hover-container.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/icon/icon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnIcon",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "attribute": "src",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string"
              },
              "attribute": "alt",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "24",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "round",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "round",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "IconLibrary"
              },
              "attribute": "library",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "IconColor"
              },
              "attribute": "color",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded"
            },
            {
              "kind": "field",
              "name": "squared",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "squared"
            },
            {
              "kind": "field",
              "name": "gravatarOptions",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "defaultLibrary",
              "type": {
                "text": "IconLibrary"
              },
              "default": "\"material-symbols-outlined\""
            },
            {
              "kind": "method",
              "name": "convertToLibrary",
              "return": {
                "type": {
                  "text": "IconLibrary"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "ravatarOptions"
            },
            {
              "kind": "method",
              "name": "getAvatarInitials",
              "privacy": "private",
              "parameters": [
                {
                  "name": "avatar",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getColorForAvatar",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "avatarInitials",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "fieldName": "src"
            },
            {
              "name": "alt",
              "type": {
                "text": "string"
              },
              "fieldName": "alt"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "24",
              "fieldName": "size"
            },
            {
              "name": "round",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "round"
            },
            {
              "name": "library",
              "type": {
                "text": "IconLibrary"
              },
              "fieldName": "library"
            },
            {
              "name": "color",
              "type": {
                "text": "IconColor"
              },
              "fieldName": "color"
            },
            {
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "padded"
            },
            {
              "name": "squared",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "squared"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "icon",
          "tagName": "zn-icon",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/icon\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/icon",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnIcon",
            "module": "components/icon/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/inline-edit/inline-edit.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnInlineEdit",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { defaultValue: (control: ZnInlineEdit) => control.defaultValue, })"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "editText",
              "type": {
                "text": "string"
              },
              "attribute": "edit-text"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "attribute": "inline"
            },
            {
              "kind": "field",
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "attribute": "padded"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "attribute": "required"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "inputType",
              "type": {
                "text": "'select' | 'text' | 'data-select' | 'number'"
              },
              "default": "'text'",
              "attribute": "input-type"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "{ [key: string]: string }"
              },
              "default": "{}",
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "selectProvider",
              "type": {
                "text": "string"
              },
              "attribute": "provider"
            },
            {
              "kind": "field",
              "name": "iconPosition",
              "type": {
                "text": "'start' | 'end' | 'none'"
              },
              "default": "'none'",
              "attribute": "icon-position"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead. *",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isEditing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "ZnInput | ZnSelect"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleIsEditingChange"
            },
            {
              "kind": "field",
              "name": "escKeyHandler"
            },
            {
              "kind": "field",
              "name": "handleEditClick"
            },
            {
              "kind": "field",
              "name": "handleSubmitClick"
            },
            {
              "kind": "field",
              "name": "handleCancelClick"
            },
            {
              "kind": "field",
              "name": "handleBlur"
            },
            {
              "kind": "field",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "_getTextInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLTemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getNumberInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLTemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getSelectInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLTemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getDataSelectInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLTemplateResult"
                }
              }
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "fieldName": "placeholder"
            },
            {
              "name": "edit-text",
              "type": {
                "text": "string"
              },
              "fieldName": "editText"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "fieldName": "disabled"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "fieldName": "inline"
            },
            {
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "fieldName": "padded"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "fieldName": "required"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "fieldName": "pattern"
            },
            {
              "name": "input-type",
              "type": {
                "text": "'select' | 'text' | 'data-select' | 'number'"
              },
              "default": "'text'",
              "fieldName": "inputType"
            },
            {
              "name": "options",
              "type": {
                "text": "{ [key: string]: string }"
              },
              "default": "{}",
              "fieldName": "options"
            },
            {
              "name": "provider",
              "type": {
                "text": "string"
              },
              "fieldName": "selectProvider"
            },
            {
              "name": "icon-position",
              "type": {
                "text": "'start' | 'end' | 'none'"
              },
              "default": "'none'",
              "fieldName": "iconPosition"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead. *",
              "fieldName": "helpText"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "inline-edit",
          "tagName": "zn-inline-edit",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/inline-edit\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/inline-edit",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnInlineEdit",
            "module": "components/inline-edit/inline-edit.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/input/input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnInput",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The internal `<input>` control.",
              "name": "input"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The password toggle button.",
              "name": "password-toggle-button"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.",
              "name": "label-tooltip"
            },
            {
              "description": "Used to add contextual text that is displayed above the input, on the right. Alternatively, you can use the `context-note` attribute.",
              "name": "context-note"
            },
            {
              "description": "Used to prepend a presentational icon or similar element to the input.",
              "name": "prefix"
            },
            {
              "description": "Used to append a presentational icon or similar element to the input.",
              "name": "suffix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "An icon to use in lieu of the default show password icon.",
              "name": "show-password-icon"
            },
            {
              "description": "An icon to use in lieu of the default hide password icon.",
              "name": "hide-password-icon"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-icon': ZnIcon, 'zn-tooltip': ZnTooltip }"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: ['zn-blur', 'zn-input'] })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label', 'label-tooltip')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "__numberInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__dateInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'currency' | 'date' | 'datetime-local' | 'email' | 'number' | 'password' |\n    'search' | 'tel' | 'text' | 'time' | 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as native `<input>` element. But only a subset of types is supported. Defaults\nto `text`",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The inputs size *",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-styled input *",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The inputs label. If you need to display HTML, use the `label` slot. *",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the\n`label-tooltip` slot.\n*",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "contextNote",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML\nin this text, use the `context-note` slot instead",
              "attribute": "context-note"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead. *",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty *",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "optionalIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds the default optional icon for this input type. Currently only types `email` and `tel` have a default\noptional icon.",
              "attribute": "optional-icon"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input *",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Fills the input background white *",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input read-only *",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the passwords visibility, only applies to password types *",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or no the password is currently visible. Only applies to password types *",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "noSpinButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browsers built-in increment/decrement spin buttons for number inputs *",
              "attribute": "no-spin-buttons"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "By default, form-controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be\nin the same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "Gets or sets the current value as `date` object. Returns `null` if the value can't be converted. This will use\nthe native `<input type=\"{{type}}\">` implementation and may result in an error."
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "Gets or sets the current value as a number. Return `null` if the value can't be converted."
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "validateMinMax",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStepChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks the validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "zn-blur"
            },
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "zn-change"
            },
            {
              "description": "Emitted when the clear button is activated.",
              "name": "zn-clear"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "zn-focus"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "zn-input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "zn-invalid"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "title"
            },
            {
              "name": "type",
              "type": {
                "text": "'currency' | 'date' | 'datetime-local' | 'email' | 'number' | 'password' |\n    'search' | 'tel' | 'text' | 'time' | 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as native `<input>` element. But only a subset of types is supported. Defaults\nto `text`",
              "fieldName": "type"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'x-small' | 'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The inputs size *",
              "fieldName": "size"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-styled input *",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The inputs label. If you need to display HTML, use the `label` slot. *",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the\n`label-tooltip` slot.\n*",
              "fieldName": "labelTooltip"
            },
            {
              "name": "context-note",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML\nin this text, use the `context-note` slot instead",
              "fieldName": "contextNote"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead. *",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty *",
              "fieldName": "clearable"
            },
            {
              "name": "optional-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds the default optional icon for this input type. Currently only types `email` and `tel` have a default\noptional icon.",
              "fieldName": "optionalIcon"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input *",
              "fieldName": "disabled"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Fills the input background white *",
              "fieldName": "filled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input read-only *",
              "fieldName": "readonly"
            },
            {
              "name": "password-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the passwords visibility, only applies to password types *",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or no the password is currently visible. Only applies to password types *",
              "fieldName": "passwordVisible"
            },
            {
              "name": "no-spin-buttons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browsers built-in increment/decrement spin buttons for number inputs *",
              "fieldName": "noSpinButtons"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "By default, form-controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be\nin the same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "fieldName": "step"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "input",
          "tagName": "zn-input",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/input\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-icon\n * @dependency zn-tooltip\n *\n * @event zn-blur - Emitted when the control loses focus.\n * @event zn-change - Emitted when an alteration to the control's value is committed by the user.\n * @event zn-clear - Emitted when the clear button is activated.\n * @event zn-focus - Emitted when the control gains focus.\n * @event zn-input - Emitted when the control receives input.\n * @event zn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @slot label - The input's label. Alternatively, you can use the `label` attribute.\n * @slot label-tooltip - Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.\n * @slot context-note - Used to add contextual text that is displayed above the input, on the right. Alternatively, you can use the `context-note` attribute.\n * @slot prefix - Used to prepend a presentational icon or similar element to the input.\n * @slot suffix - Used to append a presentational icon or similar element to the input.\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\n * @slot show-password-icon - An icon to use in lieu of the default show password icon.\n * @slot hide-password-icon - An icon to use in lieu of the default hide password icon.\n * @slot help-text - Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.\n *\n * @csspart form-control - The form control that wraps the label, input, and help text.\n * @csspart form-control-label - The label's wrapper.\n * @csspart form-control-input - The input's wrapper.\n * @csspart form-control-help-text - The help text's wrapper.\n * @csspart base - The component's base wrapper.\n * @csspart input - The internal `<input>` control.\n * @csspart prefix - The container that wraps the prefix.\n * @csspart clear-button - The clear button.\n * @csspart password-toggle-button - The password toggle button.\n * @csspart suffix - The container that wraps the suffix.\n */",
          "documentation": "https://zinc.style/components/input",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-icon",
            "zn-tooltip"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnInput",
            "module": "components/input/input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/item/item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnItem",
          "cssParts": [
            {
              "description": "The items base wrapper",
              "name": "base"
            },
            {
              "description": "The items caption",
              "name": "caption"
            },
            {
              "description": "The items icon",
              "name": "icon"
            }
          ],
          "slots": [
            {
              "description": "The default slot. Can either be slotted or use the value attribute",
              "name": ""
            },
            {
              "description": "Used for adding actions to a zn-item.",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-icon': ZnIcon }"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "stacked",
              "type": {
                "text": "boolean"
              },
              "attribute": "stacked"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "editOnHover",
              "type": {
                "text": "boolean"
              },
              "attribute": "edit-on-hover"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "attribute": "inline"
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "boolean"
              },
              "attribute": "grid"
            },
            {
              "kind": "field",
              "name": "noPadding",
              "type": {
                "text": "boolean"
              },
              "attribute": "no-padding"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "stacked",
              "type": {
                "text": "boolean"
              },
              "fieldName": "stacked"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "edit-on-hover",
              "type": {
                "text": "boolean"
              },
              "fieldName": "editOnHover"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "fieldName": "icon"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "fieldName": "inline"
            },
            {
              "name": "grid",
              "type": {
                "text": "boolean"
              },
              "fieldName": "grid"
            },
            {
              "name": "no-padding",
              "type": {
                "text": "boolean"
              },
              "fieldName": "noPadding"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Used for listing items in a description list. Caption on the right, content on the left.",
          "tagNameWithoutPrefix": "item",
          "tagName": "zn-item",
          "customElement": true,
          "jsDoc": "/**\n * @summary Used for listing items in a description list. Caption on the right, content on the left.\n * @documentation https://zinc.style/components/item\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-icon\n *\n * @slot - The default slot. Can either be slotted or use the value attribute\n * @slot actions - Used for adding actions to a zn-item.\n *\n * @csspart base - The items base wrapper\n * @csspart caption - The items caption\n * @csspart icon - The items icon\n */",
          "documentation": "https://zinc.style/components/item",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnItem",
            "module": "components/item/item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/linked-select/linked-select.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnLinkedSelect",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "linkedSelectOptions"
              },
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "linkedSelect",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "linked-select"
            },
            {
              "kind": "field",
              "name": "cacheKey",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "cache-key"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "linkedSelectElement",
              "type": {
                "text": "HTMLSelectElement | ZnSelect"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { value: (input) => { const selectElement = this.input; if (selectElement) { return selectElement.value; } return input.value; } })"
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleLinkedSelectChange",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleSelectChange"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "options",
              "type": {
                "text": "linkedSelectOptions"
              },
              "fieldName": "options"
            },
            {
              "name": "linked-select",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "linkedSelect"
            },
            {
              "name": "cache-key",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "cacheKey"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "linked-select",
          "tagName": "zn-linked-select",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/linked-select\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/linked-select",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnLinkedSelect",
            "module": "components/linked-select/linked-select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/menu/menu.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnMenu",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-confirm': ZnConfirm, 'zn-dropdown': ZnDropdown, 'zn-icon': ZnIcon, 'zn-menu-item': ZnMenuItem, 'zn-tooltip': ZnTooltip, }"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "actions"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isMenuItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "actions",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "actions"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "menu",
          "tagName": "zn-menu",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/menu\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/menu",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnMenu",
            "module": "components/menu/menu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/menu-item/menu-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnMenuItem",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-icon': ZnIcon, 'zn-popup': ZnPopup }"
            },
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "menuItem",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'normal' | 'checkbox'"
              },
              "default": "'normal'",
              "description": "The type of menu item to render. To use `checked`, this value must be set to `checkbox`.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a loading state.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "dataPath",
              "type": {
                "text": "string"
              },
              "attribute": "data-path"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "dataTarget",
              "type": {
                "text": "'modal' | 'slide' | string"
              },
              "attribute": "data-target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "gaid",
              "type": {
                "text": "string"
              },
              "attribute": "gaid"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'submenu')"
            },
            {
              "kind": "field",
              "name": "submenuController",
              "type": {
                "text": "SubmenuController"
              },
              "privacy": "private",
              "default": "new SubmenuController(this, this.hasSlotController, this.localize)"
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleHostClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleTypeChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a text label based on the contents of the menu item's default slot."
            },
            {
              "kind": "method",
              "name": "isSubmenu"
            },
            {
              "kind": "method",
              "name": "_isLink",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'normal' | 'checkbox'"
              },
              "default": "'normal'",
              "description": "The type of menu item to render. To use `checked`, this value must be set to `checkbox`.",
              "fieldName": "type"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "fieldName": "value"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a loading state.",
              "fieldName": "loading"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state, preventing selection.",
              "fieldName": "disabled"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "fieldName": "color"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "fieldName": "href"
            },
            {
              "name": "data-path",
              "type": {
                "text": "string"
              },
              "fieldName": "dataPath"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "fieldName": "target"
            },
            {
              "name": "data-target",
              "type": {
                "text": "'modal' | 'slide' | string"
              },
              "fieldName": "dataTarget"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "fieldName": "rel"
            },
            {
              "name": "gaid",
              "type": {
                "text": "string"
              },
              "fieldName": "gaid"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "menu-item",
          "tagName": "zn-menu-item",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/menu-item\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/menu-item",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnMenuItem",
            "module": "components/menu-item/menu-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/navbar/navbar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnNavbar",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-dropdown': ZnDropdown }"
            },
            {
              "kind": "field",
              "name": "navigation",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "navigation"
            },
            {
              "kind": "field",
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "attribute": "full-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconBar",
              "type": {
                "text": "boolean"
              },
              "attribute": "icon-bar",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slim",
              "type": {
                "text": "boolean"
              },
              "attribute": "slim",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "attribute": "border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideOne",
              "type": {
                "text": "boolean"
              },
              "attribute": "hide-one",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stacked",
              "type": {
                "text": "boolean"
              },
              "attribute": "stacked"
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "attribute": "dropdown"
            },
            {
              "kind": "field",
              "name": "noPad",
              "type": {
                "text": "false"
              },
              "attribute": "no-pad"
            },
            {
              "kind": "field",
              "name": "_preItems",
              "type": {
                "text": "NodeListOf<Element>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_postItems",
              "type": {
                "text": "NodeListOf<Element>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_appended",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private",
              "attribute": "_appended"
            },
            {
              "kind": "field",
              "name": "_expanding",
              "type": {
                "text": "NodeListOf<Element>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_openedTabs",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_navItems",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_expandable",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_extendedMenu",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_navItemsGap",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_expandableMargin",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_totalItemWidth",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "appendItem",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleResize"
            },
            {
              "kind": "method",
              "name": "addItem",
              "privacy": "public",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showMore"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "navigation",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "navigation"
            },
            {
              "name": "full-width",
              "type": {
                "text": "boolean"
              },
              "fieldName": "fullWidth"
            },
            {
              "name": "icon-bar",
              "type": {
                "text": "boolean"
              },
              "fieldName": "iconBar"
            },
            {
              "name": "slim",
              "type": {
                "text": "boolean"
              },
              "fieldName": "slim"
            },
            {
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "fieldName": "border"
            },
            {
              "name": "hide-one",
              "type": {
                "text": "boolean"
              },
              "fieldName": "hideOne"
            },
            {
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flush"
            },
            {
              "name": "stacked",
              "type": {
                "text": "boolean"
              },
              "fieldName": "stacked"
            },
            {
              "name": "dropdown",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "fieldName": "dropdown"
            },
            {
              "name": "no-pad",
              "type": {
                "text": "false"
              },
              "fieldName": "noPad"
            },
            {
              "name": "_appended",
              "type": {
                "text": "Element[]"
              },
              "fieldName": "_appended"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "navbar",
          "tagName": "zn-navbar",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/navbar\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-dropdown\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/navbar",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-dropdown"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnNavbar",
            "module": "components/navbar/navbar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/note/note.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnNote",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The note's caption.",
              "name": "caption"
            },
            {
              "description": "The note's date.",
              "name": "date"
            },
            {
              "description": "The note's body.",
              "name": "body"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "typeof colors[number]"
              },
              "attribute": "color",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "body",
              "reflects": true
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "color",
              "type": {
                "text": "typeof colors[number]"
              },
              "fieldName": "color"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "caption"
            },
            {
              "name": "date",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "date"
            },
            {
              "name": "body",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "body"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "note",
          "tagName": "zn-note",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/note\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot caption - The note's caption.\n * @slot date - The note's date.\n * @slot body - The note's body.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/note",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnNote",
            "module": "components/note/note.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/option/option.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnOption",
          "cssParts": [
            {
              "description": "The checked option icon, an `<zn-icon>` element.",
              "name": "checked-option-icon"
            },
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The option's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The option's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the menu item.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the menu item.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{'zn-icon': ZnIcon}"
            },
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasHover",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the option in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseEnter",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseLeave",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a plain text label based on the option's content."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the option in a disabled state, preventing selection.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "option",
          "tagName": "zn-option",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/option\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-icon\n *\n * @slot - The option's label.\n * @slot prefix - Used to prepend an icon or similar element to the menu item.\n * @slot suffix - Used to append an icon or similar element to the menu item.\n *\n * @csspart checked-option-icon - The checked option icon, an `<zn-icon>` element.\n * @csspart base - The component's base wrapper.\n * @csspart label - The option's label.\n * @csspart prefix - The container that wraps the prefix.\n * @csspart suffix - The container that wraps the suffix.\n */",
          "documentation": "https://zinc.style/components/option",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnOption",
            "module": "components/option/option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/order-table/order-table.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnOrderTable",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Object"
              },
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "isMobile",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "modifiedData",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "getHeaders"
            },
            {
              "kind": "method",
              "name": "getRows"
            },
            {
              "kind": "method",
              "name": "getCaption",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getSubItems",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getSummary"
            },
            {
              "kind": "method",
              "name": "getMobileRows",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getMobileSubItems",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getMobileCaption",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "extra",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "Object"
              },
              "fieldName": "data"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "order-table",
          "tagName": "zn-order-table",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/order-table\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/order-table",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnOrderTable",
            "module": "components/order-table/order-table.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/page-nav/page-nav.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnPageNav",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": "",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "description": "An example slot.",
              "name": "example",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "navigation",
              "type": {
                "text": "PageNavData"
              },
              "attribute": "navigation"
            },
            {
              "kind": "field",
              "name": "breadcrumb",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "toggleNavigation"
            },
            {
              "kind": "method",
              "name": "setActiveTab",
              "parameters": [
                {
                  "name": "tabName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "store",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "refresh",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "refTab",
                  "default": "null",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "clickTab",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "refresh",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "close",
                  "default": "true"
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "masterId",
              "type": {
                "text": "string"
              },
              "attribute": "master-id",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultUri",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "default-uri",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_current",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "active",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_split",
              "type": {
                "text": "number"
              },
              "attribute": "split",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_splitMin",
              "type": {
                "text": "number"
              },
              "default": "60",
              "attribute": "split-min",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_splitMax",
              "type": {
                "text": "number"
              },
              "attribute": "split-max",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "primaryCaption",
              "type": {
                "text": "string"
              },
              "default": "'Navigation'",
              "attribute": "primary-caption",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "secondaryCaption",
              "type": {
                "text": "string"
              },
              "default": "'Content'",
              "attribute": "secondary-caption",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "noPrefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-prefetch",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "localStorage",
              "type": {
                "text": "boolean"
              },
              "attribute": "local-storage",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "storeKey",
              "type": {
                "text": "string"
              },
              "attribute": "store-key",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "storeTtl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "store-ttl",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "fetchStyle",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "fetch-style",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "full-width",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "paddedRight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded-right",
              "reflects": true,
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "monitor",
              "type": {
                "text": "string"
              },
              "attribute": "monitor",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "attribute": "description",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "preload",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_store",
              "type": {
                "text": "Store"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_activeClicks",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_panel",
              "type": {
                "text": "Element | null | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_panels",
              "type": {
                "text": "Map<string, Element[]>"
              },
              "privacy": "private",
              "default": "new Map<string, Element[]>()",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_tabs",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_actions",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_knownUri",
              "type": {
                "text": "Map<string, string>"
              },
              "privacy": "private",
              "default": "new Map<string, string>()",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'bottom', 'right', 'left', 'top', 'actions')",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "monitorDom",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "_addPanel",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "_addTab",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "reRegisterTabs",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "switchTab",
              "parameters": [
                {
                  "name": "inc",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "nextTab",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "previousTab",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "_prepareTab",
              "parameters": [
                {
                  "name": "tabId",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "_uriToId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "tabUri",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "_createUriPanel",
              "return": {
                "type": {
                  "text": "HTMLDivElement"
                }
              },
              "parameters": [
                {
                  "name": "tabEle",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "tabUri",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "tabId",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "fetchUriTab",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "getRefTab",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "_setTabEleActive",
              "parameters": [
                {
                  "name": "ele",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "active",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "selectTab",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "tabName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "refresh",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "getActiveTab",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "observerDom",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "method",
              "name": "removeTabAndPanel",
              "parameters": [
                {
                  "name": "tabId",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            },
            {
              "kind": "field",
              "name": "_registerTabs",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "components/tabs/tabs.js"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "navigation",
              "type": {
                "text": "PageNavData"
              },
              "fieldName": "navigation"
            },
            {
              "name": "master-id",
              "type": {
                "text": "string"
              },
              "fieldName": "masterId",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "default-uri",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "defaultUri",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "active",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "_current",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "split",
              "type": {
                "text": "number"
              },
              "fieldName": "_split",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "split-min",
              "type": {
                "text": "number"
              },
              "default": "60",
              "fieldName": "_splitMin",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "split-max",
              "type": {
                "text": "number"
              },
              "fieldName": "_splitMax",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "primary-caption",
              "type": {
                "text": "string"
              },
              "default": "'Navigation'",
              "fieldName": "primaryCaption",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "secondary-caption",
              "type": {
                "text": "string"
              },
              "default": "'Content'",
              "fieldName": "secondaryCaption",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "no-prefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noPrefetch",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "local-storage",
              "type": {
                "text": "boolean"
              },
              "fieldName": "localStorage",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "store-key",
              "type": {
                "text": "string"
              },
              "fieldName": "storeKey",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "store-ttl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "storeTtl",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "padded",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "fetch-style",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "fetchStyle",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "full-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "fullWidth",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "padded-right",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "paddedRight",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "monitor",
              "type": {
                "text": "string"
              },
              "fieldName": "monitor",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "fieldName": "description",
              "inheritedFrom": {
                "name": "ZnTabs",
                "module": "src/components/tabs/tabs.component.ts"
              }
            }
          ],
          "superclass": {
            "name": "ZnTabs",
            "module": "/src/components/tabs"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "page-nav",
          "tagName": "zn-page-nav",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/page-nav\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/page-nav",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnPageNav",
            "module": "components/page-nav/page-nav.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/pagination/pagination.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnPagination",
          "members": [
            {
              "kind": "field",
              "name": "limit",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "limit",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "total",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "total",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "uri",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "uri",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_createLink",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "page",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_calculatePages",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "limit",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "limit"
            },
            {
              "name": "total",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "total"
            },
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "uri",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "uri"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Pagination component for navigating through pages of content.",
          "tagNameWithoutPrefix": "pagination",
          "tagName": "zn-pagination",
          "customElement": true,
          "jsDoc": "/**\n * @summary Pagination component for navigating through pages of content.\n * @documentation https://zinc.style/components/pagination\n * @status experimental\n * @since 1.0\n */",
          "documentation": "https://zinc.style/components/pagination",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnPagination",
            "module": "components/pagination/pagination.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/pane/pane.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnPane",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "attribute": "flush"
            },
            {
              "kind": "field",
              "name": "_header",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "fieldName": "flush"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "pane",
          "tagName": "zn-pane",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/pane\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/pane",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnPane",
            "module": "components/pane/pane.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/panel/panel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnPanel",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The actions slot.",
              "name": "actions"
            },
            {
              "description": "The footer slot.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'actions', 'footer')"
            },
            {
              "kind": "field",
              "name": "basis",
              "type": {
                "text": "number"
              },
              "attribute": "basis-px"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "tabbed",
              "type": {
                "text": "boolean"
              },
              "attribute": "tabbed"
            },
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "attribute": "flush"
            },
            {
              "kind": "field",
              "name": "flushX",
              "type": {
                "text": "boolean"
              },
              "attribute": "flush-x"
            },
            {
              "kind": "field",
              "name": "flushY",
              "type": {
                "text": "boolean"
              },
              "attribute": "flush-y"
            },
            {
              "kind": "field",
              "name": "transparent",
              "type": {
                "text": "boolean"
              },
              "attribute": "transparent"
            }
          ],
          "attributes": [
            {
              "name": "basis-px",
              "type": {
                "text": "number"
              },
              "fieldName": "basis"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "fieldName": "description"
            },
            {
              "name": "tabbed",
              "type": {
                "text": "boolean"
              },
              "fieldName": "tabbed"
            },
            {
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "fieldName": "flush"
            },
            {
              "name": "flush-x",
              "type": {
                "text": "boolean"
              },
              "fieldName": "flushX"
            },
            {
              "name": "flush-y",
              "type": {
                "text": "boolean"
              },
              "fieldName": "flushY"
            },
            {
              "name": "transparent",
              "type": {
                "text": "boolean"
              },
              "fieldName": "transparent"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "panel",
          "tagName": "zn-panel",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/panel\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot.\n * @slot actions - The actions slot.\n * @slot footer - The footer slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/panel",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnPanel",
            "module": "components/panel/panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/popup/popup.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnPopup",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "anchorEl",
              "type": {
                "text": "Element | VirtualElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "HTMLElement"
              },
              "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript."
            },
            {
              "kind": "field",
              "name": "arrowEl",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | VirtualElement"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "attribute": "anchor"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "default": "'fixed'",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "attribute": "strategy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "default": "'anchor'",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "attribute": "arrow-placement"
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "attribute": "arrow-padding"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "attribute": "flip-fallback-placements"
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "default": "'best-fit'",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "attribute": "flip-fallback-strategy"
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "flipBoundary"
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "attribute": "flip-padding"
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "shiftBoundary"
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "attribute": "shift-padding"
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "attribute": "auto-size"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both'"
              },
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "attribute": "sync"
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "autoSizeBoundary"
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "attribute": "auto-size-padding"
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "attribute": "hover-bridge"
            },
            {
              "kind": "method",
              "name": "handleAnchorChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Forces the popup to recalculate and reposition itself."
            },
            {
              "kind": "field",
              "name": "updateHoverBridge",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | VirtualElement"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "fieldName": "anchor"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "fieldName": "active"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "strategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "default": "'fixed'",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "fieldName": "strategy"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "fieldName": "skidding"
            },
            {
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "fieldName": "arrow"
            },
            {
              "name": "arrow-placement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "default": "'anchor'",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "fieldName": "arrowPlacement"
            },
            {
              "name": "arrow-padding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "fieldName": "arrowPadding"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "fieldName": "flip"
            },
            {
              "name": "flip-fallback-placements",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "fieldName": "flipFallbackPlacements"
            },
            {
              "name": "flip-fallback-strategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "default": "'best-fit'",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "fieldName": "flipFallbackStrategy"
            },
            {
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "flipBoundary"
            },
            {
              "name": "flip-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "fieldName": "flipPadding"
            },
            {
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "fieldName": "shift"
            },
            {
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "shiftBoundary"
            },
            {
              "name": "shift-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "fieldName": "shiftPadding"
            },
            {
              "name": "auto-size",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "fieldName": "autoSize"
            },
            {
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both'"
              },
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "fieldName": "sync"
            },
            {
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "autoSizeBoundary"
            },
            {
              "name": "auto-size-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "fieldName": "autoSizePadding"
            },
            {
              "name": "hover-bridge",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "fieldName": "hoverBridge"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "popup",
          "tagName": "zn-popup",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/popup\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/popup",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnPopup",
            "module": "components/popup/popup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/progress-bar/progress-bar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnProgressBar",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showProgress",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "show-progress",
              "reflects": true
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "description"
            },
            {
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "value"
            },
            {
              "name": "show-progress",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "showProgress"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "progress-bar",
          "tagName": "zn-progress-bar",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/progress-bar\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/progress-bar",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnProgressBar",
            "module": "components/progress-bar/progress-bar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/progress-tile/progress-tile.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnProgressTile",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "startTime",
              "type": {
                "text": "number"
              },
              "attribute": "start-time"
            },
            {
              "kind": "field",
              "name": "waitTime",
              "type": {
                "text": "number"
              },
              "attribute": "wait-time",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxTime",
              "type": {
                "text": "number"
              },
              "attribute": "max-time"
            },
            {
              "kind": "field",
              "name": "endTime",
              "type": {
                "text": "number"
              },
              "attribute": "end-time"
            },
            {
              "kind": "field",
              "name": "maxWaitTime",
              "type": {
                "text": "number"
              },
              "attribute": "max-wait-time"
            },
            {
              "kind": "field",
              "name": "waitingAgentResponse",
              "type": {
                "text": "boolean"
              },
              "attribute": "waiting-agent-response"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "string"
              },
              "attribute": "status"
            },
            {
              "kind": "field",
              "name": "avatar",
              "type": {
                "text": "string"
              },
              "attribute": "avatar"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "_timerInterval",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getHumanReadableTime",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "time",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "start-time",
              "type": {
                "text": "number"
              },
              "fieldName": "startTime"
            },
            {
              "name": "wait-time",
              "type": {
                "text": "number"
              },
              "fieldName": "waitTime"
            },
            {
              "name": "max-time",
              "type": {
                "text": "number"
              },
              "fieldName": "maxTime"
            },
            {
              "name": "end-time",
              "type": {
                "text": "number"
              },
              "fieldName": "endTime"
            },
            {
              "name": "max-wait-time",
              "type": {
                "text": "number"
              },
              "fieldName": "maxWaitTime"
            },
            {
              "name": "waiting-agent-response",
              "type": {
                "text": "boolean"
              },
              "fieldName": "waitingAgentResponse"
            },
            {
              "name": "status",
              "type": {
                "text": "string"
              },
              "fieldName": "status"
            },
            {
              "name": "avatar",
              "type": {
                "text": "string"
              },
              "fieldName": "avatar"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "progress-tile",
          "tagName": "zn-progress-tile",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/progress-tile\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/progress-tile",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnProgressTile",
            "module": "components/progress-tile/progress-tile.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/query-builder/query-builder.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnQueryBuilder",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-button': ZnButton, 'zn-input': ZnInput, 'zn-option': ZnOption, 'zn-select': ZnSelect, }"
            },
            {
              "kind": "field",
              "name": "_selectedRules",
              "type": {
                "text": "Map<string, CreatedRule>"
              },
              "privacy": "private",
              "default": "new Map<string, CreatedRule>()"
            },
            {
              "kind": "field",
              "name": "_formController",
              "type": {
                "text": "FormControlController"
              },
              "privacy": "private",
              "default": "new FormControlController(this, {})"
            },
            {
              "kind": "field",
              "name": "_previousOperator",
              "type": {
                "text": "QueryBuilderOperators"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "addRule",
              "type": {
                "text": "ZnSelect"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "QueryBuilderData"
              },
              "default": "[]",
              "attribute": "filters"
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "dropdown"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "PropertyKey"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "showValues",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "attribute": "show-values"
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addRule",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event | null"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pos",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "filter",
                  "type": {
                    "text": "QueryBuilderItem"
                  }
                },
                {
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "selectedComparator",
                  "type": {
                    "text": "QueryBuilderOperators"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_changeValueInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "changeEvent",
                  "type": {
                    "text": "ZnChangeEvent"
                  }
                },
                {
                  "name": "filter",
                  "type": {
                    "text": "QueryBuilderItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createBooleanInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ZnSelect | null"
                }
              },
              "parameters": [
                {
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createNumberInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ZnInput | null"
                }
              },
              "parameters": [
                {
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createDateInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ZnInput | null"
                }
              },
              "parameters": [
                {
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createSelectInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ZnSelect | null"
                }
              },
              "parameters": [
                {
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "filter",
                  "type": {
                    "text": "QueryBuilderItem"
                  }
                },
                {
                  "name": "selectedComparator",
                  "type": {
                    "text": "QueryBuilderOperators"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createDefaultInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ZnInput | null"
                }
              },
              "parameters": [
                {
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateOperatorValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "ZnChangeEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateDateValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event | { target: ZnSelect | ZnInput | HTMLDivElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event | { target: ZnSelect | ZnInput | HTMLDivElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateInValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_changeRule",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "ZnChangeEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getRulePosition",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_removeRule",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clear"
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "filters",
              "type": {
                "text": "QueryBuilderData"
              },
              "default": "[]",
              "fieldName": "filters"
            },
            {
              "name": "dropdown",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "dropdown"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "PropertyKey"
              },
              "fieldName": "value"
            },
            {
              "name": "show-values",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "fieldName": "showValues"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "query-builder",
          "tagName": "zn-query-builder",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/query-builder\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-button\n * @dependency zn-input\n * @dependency zn-option\n * @dependency zn-select\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/query-builder",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-button",
            "zn-input",
            "zn-option",
            "zn-select"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnQueryBuilder",
            "module": "components/query-builder/query-builder.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio/radio.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnRadio",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The square container that wraps the radio's checked state.",
              "name": "control"
            },
            {
              "description": "Matches the control part when the radio is checked.",
              "name": "control--checked"
            },
            {
              "description": "The checked icon, an `<zn-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "The container that wraps the radio's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the radio's description.",
              "name": "description"
            },
            {
              "description": "The container that wraps optional content that appears when a radio is checked.",
              "name": "selected-content"
            }
          ],
          "slots": [
            {
              "description": "The radio's label.",
              "name": ""
            },
            {
              "description": "A description of the radio's label. Serves as help text for a radio item. Alternatively, you can use the `description` attribute.",
              "name": "description"
            },
            {
              "description": "Use to nest rich content (like an input) inside a selected radio item. Use only with the contained style.",
              "name": "selected-content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{'zn-icon': ZnIcon}"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { value: (control: ZnRadio) => (control.checked ? control.value || 'on' : undefined), defaultValue: (control: ZnRadio) => control.defaultChecked, setValue: (control: ZnRadio, checked: boolean) => (control.checked = checked) })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'description')"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the radio, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the radio, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the radio in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a container around the radio.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies styles relevant to radios in a horizontal layout.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the radio a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio's help text. If you need to display HTML, use the `description` slot instead.",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSelectedContentClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the radio."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the radio."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the radio."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear\nthe custom validation message, call this method with an empty string."
            }
          ],
          "events": [
            {
              "description": "Emitted when the radio loses focus.",
              "name": "zn-blur"
            },
            {
              "description": "Emitted when the checked state changes.",
              "name": "zn-change"
            },
            {
              "description": "Emitted when the radio gains focus.",
              "name": "zn-focus"
            },
            {
              "description": "Emitted when the radio receives input.",
              "name": "zn-input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "zn-invalid"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the radio, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The current value of the radio, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio's size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the radio in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a container around the radio.",
              "fieldName": "contained"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies styles relevant to radios in a horizontal layout.",
              "fieldName": "horizontal"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the radio a required field.",
              "fieldName": "required"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio's help text. If you need to display HTML, use the `description` slot instead.",
              "fieldName": "description"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "fieldName": "labelTooltip"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "radio",
          "tagName": "zn-radio",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/radio\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-icon\n *\n * @slot - The radio's label.\n * @slot description - A description of the radio's label. Serves as help text for a radio item. Alternatively, you can use the `description` attribute.\n * @slot selected-content - Use to nest rich content (like an input) inside a selected radio item. Use only with the contained style.\n *\n * @event zn-blur - Emitted when the radio loses focus.\n * @event zn-change - Emitted when the checked state changes.\n * @event zn-focus - Emitted when the radio gains focus.\n * @event zn-input - Emitted when the radio receives input.\n * @event zn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @csspart base - The component's base wrapper.\n * @csspart control - The square container that wraps the radio's checked state.\n * @csspart control--checked - Matches the control part when the radio is checked.\n * @csspart checked-icon - The checked icon, an `<zn-icon>` element.\n * @csspart label - The container that wraps the radio's label.\n * @csspart description - The container that wraps the radio's description.\n * @csspart selected-content - The container that wraps optional content that appears when a radio is checked.\n */",
          "documentation": "https://zinc.style/components/radio",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnRadio",
            "module": "components/radio/radio.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-group/radio-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnRadioGroup",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "protected",
              "readonly": true,
              "default": "new FormControlController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "customValidityMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "validationTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "validationInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot\ninstead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio groups' help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the radio group, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the radio group, submitted as a name/value pair with form data.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio group's size. This size will be applied to all child radios",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's orientation. Changes the group's layout from the default (vertical) to horizontal.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's style. Changes the group's style from the default (plain) style to the 'contained' style. This style will be applied to all child checkboxes.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures a child radio is checked before allowing the containing form to submit.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getAllRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleRadioClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncRadioElements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateCheckedRadio",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSizeChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "default": "''"
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot\ninstead.",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "fieldName": "labelTooltip"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio groups' help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the radio group, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the radio group, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The radio group's size. This size will be applied to all child radios",
              "fieldName": "size"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's orientation. Changes the group's layout from the default (vertical) to horizontal.",
              "fieldName": "horizontal"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The checkbox group's style. Changes the group's style from the default (plain) style to the 'contained' style. This style will be applied to all child checkboxes.",
              "fieldName": "contained"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures a child radio is checked before allowing the containing form to submit.",
              "fieldName": "required"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "radio-group",
          "tagName": "zn-radio-group",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/radio-group\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/radio-group",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnRadioGroup",
            "module": "components/radio-group/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/rating/rating.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnRating",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: ['zn-blur', 'zn-input'] })"
            },
            {
              "kind": "field",
              "name": "rating",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "isHovering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "precision"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "getSymbol",
              "type": {
                "text": "(value: number) => string"
              },
              "attribute": "getSymbol"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks the validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "_roundToPrecision",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "precision",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getValueFromXCoordinate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "coordinate",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getValueFromMousePosition",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getValueFromTouchPosition",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMouseEnter",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMouseMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMouseLeave",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTouchStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTouchMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTouchEnd",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "value"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "fieldName": "max"
            },
            {
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "precision"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "getSymbol",
              "type": {
                "text": "(value: number) => string"
              },
              "fieldName": "getSymbol"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "rating",
          "tagName": "zn-rating",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/rating\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/rating",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnRating",
            "module": "components/rating/rating.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/scroll-container/scroll-container.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnScrollContainer",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "scroll-container",
          "tagName": "zn-scroll-container",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/scroll-container\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/scroll-container",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnScrollContainer",
            "module": "components/scroll-container/scroll-container.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnSelect",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The select's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The container the wraps the prefix, combobox, clear icon, and expand button.",
              "name": "combobox"
            },
            {
              "description": "The container that wraps the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "The element that displays the selected option's label, an `<input>` element.",
              "name": "display-input"
            },
            {
              "description": "The listbox container where options are slotted.",
              "name": "listbox"
            },
            {
              "description": "The container that houses option tags when `multiselect` is used.",
              "name": "tags"
            },
            {
              "description": "The individual tags that represent each multiselect option.",
              "name": "tag"
            },
            {
              "description": "The tag's base part.",
              "name": "tag__base"
            },
            {
              "description": "The tag's content part.",
              "name": "tag__content"
            },
            {
              "description": "The tag's remove button.",
              "name": "tag__remove-button"
            },
            {
              "description": "The tag's remove button base part.",
              "name": "tag__remove-button__base"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The container that wraps the expand icon.",
              "name": "expand-icon"
            }
          ],
          "slots": [
            {
              "description": "The listbox options. Must be `<zn-option>` elements. You can use `<zn-divider>` to group items visually.",
              "name": ""
            },
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.",
              "name": "label-tooltip"
            },
            {
              "description": "Used to add contextual text that is displayed above the select, on the right. Alternatively, you can use the `context-note` attribute.",
              "name": "context-note"
            },
            {
              "description": "Used to prepend a presentational icon or similar element to the combobox.",
              "name": "prefix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "The icon to show when the control is expanded and collapsed. Rotates on open and close.",
              "name": "expand-icon"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-icon': ZnIcon, 'zn-popup': ZnPopup, 'zn-tag': ZnChip }"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "protected",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: ['zn-blur', 'zn-input'] })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "ZnPopup"
              }
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "displayInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "valueInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "currentOption",
              "type": {
                "text": "ZnOption"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ZnOption[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | string[]"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\nvalue attribute will be a space-delimited list of values based on the options selected, and the value property will\nbe an array. **For this reason, values must not contain spaces.**"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows more than one option to be selected.",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxOptions",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max number of options that can be selected when `multiple` is true. Set to 0 to allow unlimited selections.",
              "attribute": "max-options"
            },
            {
              "kind": "field",
              "name": "maxOptionsVisible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "attribute": "max-options-visible"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style select with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "contextNote",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML in this text, use the `context-note` slot instead.",
              "attribute": "context-note"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the selects menu. Note that the actual placement may vary as needed to keep the listbox\ninside the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cacheKey",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "cache-key"
            },
            {
              "kind": "field",
              "name": "getTag",
              "type": {
                "text": "(option: ZnOption, index: number) => TemplateResult | string | HTMLElement"
              },
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "attribute": "getTag"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentFocusIn",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleComboboxMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTagRemove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ZnRemoveEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "ZnOption"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ZnOption | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ZnOption | ZnOption[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleOptionSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "ZnOption"
                  }
                },
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tags",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "zn-change"
            },
            {
              "description": "Emitted when the control's value is cleared.",
              "name": "zn-clear"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "zn-input"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "zn-focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "zn-blur"
            },
            {
              "description": "Emitted when the select's menu opens.",
              "name": "zn-show"
            },
            {
              "description": "Emitted after the select's menu opens and all animations are complete.",
              "name": "zn-after-show"
            },
            {
              "description": "Emitted when the select's menu closes.",
              "name": "zn-hide"
            },
            {
              "description": "Emitted after the select's menu closes and all animations are complete.",
              "name": "zn-after-hide"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "zn-invalid"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control.",
              "fieldName": "defaultValue"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "fieldName": "size"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows more than one option to be selected.",
              "fieldName": "multiple"
            },
            {
              "name": "max-options",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max number of options that can be selected when `multiple` is true. Set to 0 to allow unlimited selections.",
              "fieldName": "maxOptions"
            },
            {
              "name": "max-options-visible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "fieldName": "maxOptionsVisible"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "fieldName": "disabled"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "fieldName": "open"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style select with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "fieldName": "labelTooltip"
            },
            {
              "name": "context-note",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the input, on the right, to add additional context. If you need to display HTML in this text, use the `context-note` slot instead.",
              "fieldName": "contextNote"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the selects menu. Note that the actual placement may vary as needed to keep the listbox\ninside the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "fieldName": "required"
            },
            {
              "name": "cache-key",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "cacheKey"
            },
            {
              "name": "getTag",
              "type": {
                "text": "(option: ZnOption, index: number) => TemplateResult | string | HTMLElement"
              },
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "fieldName": "getTag"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "select",
          "tagName": "zn-select",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/select\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-icon\n * @dependency zn-popup\n * @dependency zn-tag\n *\n * @slot - The listbox options. Must be `<zn-option>` elements. You can use `<zn-divider>` to group items visually.\n * @slot label - The input's label. Alternatively, you can use the `label` attribute.\n * @slot label-tooltip - Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.\n * @slot context-note - Used to add contextual text that is displayed above the select, on the right. Alternatively, you can use the `context-note` attribute.\n * @slot prefix - Used to prepend a presentational icon or similar element to the combobox.\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\n * @slot expand-icon - The icon to show when the control is expanded and collapsed. Rotates on open and close.\n * @slot help-text - Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.\n *\n * @event zn-change - Emitted when the control's value changes.\n * @event zn-clear - Emitted when the control's value is cleared.\n * @event zn-input - Emitted when the control receives input.\n * @event zn-focus - Emitted when the control gains focus.\n * @event zn-blur - Emitted when the control loses focus.\n * @event zn-show - Emitted when the select's menu opens.\n * @event zn-after-show - Emitted after the select's menu opens and all animations are complete.\n * @event zn-hide - Emitted when the select's menu closes.\n * @event zn-after-hide - Emitted after the select's menu closes and all animations are complete.\n * @event zn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @csspart form-control - The form control that wraps the label, input, and help text.\n * @csspart form-control-label - The label's wrapper.\n * @csspart form-control-input - The select's wrapper.\n * @csspart form-control-help-text - The help text's wrapper.\n * @csspart combobox - The container the wraps the prefix, combobox, clear icon, and expand button.\n * @csspart prefix - The container that wraps the prefix slot.\n * @csspart display-input - The element that displays the selected option's label, an `<input>` element.\n * @csspart listbox - The listbox container where options are slotted.\n * @csspart tags - The container that houses option tags when `multiselect` is used.\n * @csspart tag - The individual tags that represent each multiselect option.\n * @csspart tag__base - The tag's base part.\n * @csspart tag__content - The tag's content part.\n * @csspart tag__remove-button - The tag's remove button.\n * @csspart tag__remove-button__base - The tag's remove button base part.\n * @csspart clear-button - The clear button.\n * @csspart expand-icon - The container that wraps the expand icon.\n */",
          "documentation": "https://zinc.style/components/select",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-icon",
            "zn-popup",
            "zn-tag"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSelect",
            "module": "components/select/select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/sidebar/sidebar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnSidebar",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "startScrolled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "start-scrolled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "wide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "wide"
            },
            {
              "kind": "method",
              "name": "observerDom"
            },
            {
              "kind": "method",
              "name": "scrollBottom"
            },
            {
              "kind": "method",
              "name": "_expander"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "start-scrolled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "startScrolled"
            },
            {
              "name": "wide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "wide"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "sidebar",
          "tagName": "zn-sidebar",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/sidebar\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/sidebar",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSidebar",
            "module": "components/sidebar/sidebar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/simple-chart/simple-chart.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnSimpleChart",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "datasets",
              "type": {
                "text": "any[]"
              },
              "attribute": "datasets"
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "any[]"
              },
              "attribute": "labels"
            },
            {
              "kind": "field",
              "name": "myChart",
              "type": {
                "text": "Chart"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "datasets",
              "type": {
                "text": "any[]"
              },
              "fieldName": "datasets"
            },
            {
              "name": "labels",
              "type": {
                "text": "any[]"
              },
              "fieldName": "labels"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "simple-chart",
          "tagName": "zn-simple-chart",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/simple-chart\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/simple-chart",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSimpleChart",
            "module": "components/simple-chart/simple-chart.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/skeleton/skeleton.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "speed",
              "type": {
                "text": "string"
              },
              "default": "'3s'",
              "attribute": "speed"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "default": "'100%'",
              "attribute": "width"
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "string"
              },
              "default": "'20px'",
              "attribute": "height"
            },
            {
              "kind": "field",
              "name": "radius",
              "type": {
                "text": "string"
              },
              "default": "'4px'",
              "attribute": "radius"
            }
          ],
          "attributes": [
            {
              "name": "speed",
              "type": {
                "text": "string"
              },
              "default": "'3s'",
              "fieldName": "speed"
            },
            {
              "name": "width",
              "type": {
                "text": "string"
              },
              "default": "'100%'",
              "fieldName": "width"
            },
            {
              "name": "height",
              "type": {
                "text": "string"
              },
              "default": "'20px'",
              "fieldName": "height"
            },
            {
              "name": "radius",
              "type": {
                "text": "string"
              },
              "default": "'4px'",
              "fieldName": "radius"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "skeleton",
          "tagName": "zn-skeleton",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/skeleton\n * @status experimental\n * @since 1.0\n */",
          "documentation": "https://zinc.style/components/skeleton",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSkeleton",
            "module": "components/skeleton/skeleton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/slideout/slideout.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnSlideout",
          "cssProperties": [
            {
              "description": "The preferred width of the slideout. Note the slideout will shrink to accommodate smaller screens.",
              "name": "--width"
            },
            {
              "description": "The amount of padding to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "The amount of padding to use for the body.",
              "name": "--body-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The slideout's header. This element wraps the title and header actions.",
              "name": "header"
            },
            {
              "description": "The slideout's close button.",
              "name": "close-button"
            },
            {
              "description": "The close buttons exported `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "The slideout's body.",
              "name": "body"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The slideout's label. Alternatively you can use the `label` attribute.",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ 'zn-button': ZnButton }"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "slideout",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicated whether of not the slideout is open. You can toggle this attribute to show and hide the slideout, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the slideout's state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The slideout's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "description": "The slideout's trigger element. This is used to open the slideout when clicked. If you do not provide a trigger, you\nwill need to manually open the slideout using the `show()` method.",
              "attribute": "trigger",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "'close-button' | 'keyboard' | 'overlay'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the slideout."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the slideout."
            },
            {
              "kind": "field",
              "name": "closeClickHandler",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the slideout is opens.",
              "name": "zn-show"
            },
            {
              "description": "Emitted when the slideout is closed.",
              "name": "zn-close"
            },
            {
              "type": {
                "text": "{ source: 'close-button' | 'keyboard' | 'overlay' }"
              },
              "description": "Emitted when the user attempts to close the slideout by clicking the close button, clicking the overlay, or pressing escape. Calling `event.preventDefault()` will keep the slideout open. Avoid using this unless closing the slideout will result in destructive behavior such as data loss.",
              "name": "zn-request-close"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicated whether of not the slideout is open. You can toggle this attribute to show and hide the slideout, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the slideout's state.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The slideout's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "description": "The slideout's trigger element. This is used to open the slideout when clicked. If you do not provide a trigger, you\nwill need to manually open the slideout using the `show()` method.",
              "fieldName": "trigger"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "slideout",
          "tagName": "zn-slideout",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/slideout\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-button\n *\n * @event zn-show - Emitted when the slideout is opens.\n * @event zn-close - Emitted when the slideout is closed.\n * @event {{ source: 'close-button' | 'keyboard' | 'overlay' }} zn-request-close - Emitted when the user attempts to\n * close the slideout by clicking the close button, clicking the overlay, or pressing escape. Calling\n * `event.preventDefault()` will keep the slideout open. Avoid using this unless closing the slideout will result in\n * destructive behavior such as data loss.\n *\n * @slot - The default slot.\n * @slot label - The slideout's label. Alternatively you can use the `label` attribute.\n *\n * @csspart base - The component's base wrapper.\n * @csspart header - The slideout's header. This element wraps the title and header actions.\n * @csspart close-button - The slideout's close button.\n * @csspart close-button__base - The close buttons exported `base` part.\n * @csspart body - The slideout's body.\n *\n * @cssproperty --width - The preferred width of the slideout. Note the slideout will shrink to accommodate smaller screens.\n * @cssproperty --header-spacing - The amount of padding to use for the header.\n * @cssproperty --body-spacing - The amount of padding to use for the body.\n */",
          "documentation": "https://zinc.style/components/slideout",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-button"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSlideout",
            "module": "components/slideout/slideout.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/sp/sp.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultSizes",
          "type": {
            "text": "object"
          },
          "default": "{ px: '1', xxs: '3', xs: '5', sm: '10', md: '15', lg: '20', xl: '25' }"
        },
        {
          "kind": "class",
          "description": "",
          "name": "ZnSp",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "divide",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "keyof typeof defaultSizes"
              },
              "attribute": "gap",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "row",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "row",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "grow",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "padX",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "pad-x",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "padY",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "pad-y",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noGap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-gap",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushX",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-x",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushY",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-y",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushT",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-t",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushB",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-b",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushL",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-l",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flushR",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flush-r",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "widthContainer",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "width-container",
              "reflects": true
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "divide",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "divide"
            },
            {
              "name": "gap",
              "type": {
                "text": "keyof typeof defaultSizes"
              },
              "fieldName": "gap"
            },
            {
              "name": "row",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "row"
            },
            {
              "name": "grow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "grow"
            },
            {
              "name": "pad-x",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "padX"
            },
            {
              "name": "pad-y",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "padY"
            },
            {
              "name": "no-gap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noGap"
            },
            {
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flush"
            },
            {
              "name": "flush-x",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushX"
            },
            {
              "name": "flush-y",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushY"
            },
            {
              "name": "flush-t",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushT"
            },
            {
              "name": "flush-b",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushB"
            },
            {
              "name": "flush-l",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushL"
            },
            {
              "name": "flush-r",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flushR"
            },
            {
              "name": "width-container",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "widthContainer"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "sp",
          "tagName": "zn-sp",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/sp\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/sp",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultSizes",
          "declaration": {
            "name": "defaultSizes",
            "module": "components/sp/sp.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSp",
            "module": "components/sp/sp.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/split-button/split-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnSplitButton",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this)"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "ZnDropdown"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "ZnButton"
              }
            },
            {
              "kind": "method",
              "name": "handleMenuItemClick",
              "privacy": "public",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "ZnMenuSelectEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "public",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerClick",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_isButton",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "fieldName": "href"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "fieldName": "type"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "split-button",
          "tagName": "zn-split-button",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/split-button\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/split-button",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSplitButton",
            "module": "components/split-button/split-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/split-pane/split-pane.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnSplitPane",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "storage",
              "type": {
                "text": "Storage"
              }
            },
            {
              "kind": "field",
              "name": "mouseMoveHandler",
              "type": {
                "text": "null | EventListener"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "mouseUpHandler",
              "type": {
                "text": "null | EventListener"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "currentPixelSize",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "currentPercentSize",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "currentContainerSize",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "primaryFull",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "calculatePixels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "pixels",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "preferSecondarySize",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "secondary",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minimumPaneSize",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "min-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maximumPaneSize",
              "type": {
                "text": "number"
              },
              "attribute": "max-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "initialSize",
              "type": {
                "text": "number"
              },
              "default": "50",
              "attribute": "initial-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "storeKey",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "store-key",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "bordered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryCaption",
              "type": {
                "text": "string"
              },
              "default": "'Primary'",
              "attribute": "primary-caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "secondaryCaption",
              "type": {
                "text": "string"
              },
              "default": "'Secondary'",
              "attribute": "secondary-caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_focusPane",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "focus-pane",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "paddedRight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded-right",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "localStorage",
              "type": {
                "text": "boolean"
              },
              "attribute": "local-storage",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "storeTtl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "store-ttl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_store",
              "type": {
                "text": "Store"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "applyStoredSize"
            },
            {
              "kind": "method",
              "name": "resize",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSize",
              "parameters": [
                {
                  "name": "primaryPanelPixels",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_togglePane",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setFocusPane",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "pixels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "calculatePixels"
            },
            {
              "name": "secondary",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "preferSecondarySize"
            },
            {
              "name": "min-size",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "minimumPaneSize"
            },
            {
              "name": "max-size",
              "type": {
                "text": "number"
              },
              "fieldName": "maximumPaneSize"
            },
            {
              "name": "initial-size",
              "type": {
                "text": "number"
              },
              "default": "50",
              "fieldName": "initialSize"
            },
            {
              "name": "store-key",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "storeKey"
            },
            {
              "name": "bordered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "border"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "vertical"
            },
            {
              "name": "primary-caption",
              "type": {
                "text": "string"
              },
              "default": "'Primary'",
              "fieldName": "primaryCaption"
            },
            {
              "name": "secondary-caption",
              "type": {
                "text": "string"
              },
              "default": "'Secondary'",
              "fieldName": "secondaryCaption"
            },
            {
              "name": "focus-pane",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "_focusPane"
            },
            {
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "padded"
            },
            {
              "name": "padded-right",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "paddedRight"
            },
            {
              "name": "local-storage",
              "type": {
                "text": "boolean"
              },
              "fieldName": "localStorage"
            },
            {
              "name": "store-ttl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "storeTtl"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "split-pane",
          "tagName": "zn-split-pane",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/split-pane\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/split-pane",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnSplitPane",
            "module": "components/split-pane/split-pane.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/stat/stat.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnStatsTile",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "amount",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "attribute": "amount"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'number'",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "previous",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "attribute": "previous"
            },
            {
              "kind": "field",
              "name": "currency",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "currency"
            },
            {
              "kind": "field",
              "name": "showDelta",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "show-delta"
            },
            {
              "kind": "method",
              "name": "calcPercentageDifference"
            },
            {
              "kind": "method",
              "name": "getCurrentAmount"
            },
            {
              "kind": "method",
              "name": "getDisplayAmount",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "diffText"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "description"
            },
            {
              "name": "amount",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "fieldName": "amount"
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'number'",
              "fieldName": "type"
            },
            {
              "name": "previous",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "fieldName": "previous"
            },
            {
              "name": "currency",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "currency"
            },
            {
              "name": "show-delta",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "showDelta"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "stat",
          "tagName": "zn-stat",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/stats-tile\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/stats-tile",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnStatsTile",
            "module": "components/stat/stat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/status-indicator/status-indicator.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnStatusIndicator",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'success' | 'error' | 'warning' | 'info'"
              },
              "default": "'info'",
              "attribute": "type"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'success' | 'error' | 'warning' | 'info'"
              },
              "default": "'info'",
              "fieldName": "type"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Circular status indicators.",
          "tagNameWithoutPrefix": "status-indicator",
          "tagName": "zn-status-indicator",
          "customElement": true,
          "jsDoc": "/**\n * @summary Circular status indicators.\n * @documentation https://zinc.style/components/status-indicator\n * @status experimental\n * @since 1.0\n */",
          "documentation": "https://zinc.style/components/status-indicator",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnStatusIndicator",
            "module": "components/status-indicator/status-indicator.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/stepper/stepper.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnStepper",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "steps",
              "type": {
                "text": "number"
              },
              "attribute": "steps",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showProgress",
              "type": {
                "text": "boolean"
              },
              "attribute": "show-progress",
              "reflects": true
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            },
            {
              "name": "steps",
              "type": {
                "text": "number"
              },
              "fieldName": "steps"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "fieldName": "value"
            },
            {
              "name": "show-progress",
              "type": {
                "text": "boolean"
              },
              "fieldName": "showProgress"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "stepper",
          "tagName": "zn-stepper",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/stepper\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/stepper",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnStepper",
            "module": "components/stepper/stepper.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/style/style.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnStyle",
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "readonly": true,
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "border"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "error"
            },
            {
              "kind": "field",
              "name": "success",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "success"
            },
            {
              "kind": "field",
              "name": "info",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "info"
            },
            {
              "kind": "field",
              "name": "warning",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "warning"
            },
            {
              "kind": "field",
              "name": "primary",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "primary"
            },
            {
              "kind": "field",
              "name": "accent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "accent"
            },
            {
              "kind": "field",
              "name": "pad",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "pad"
            },
            {
              "kind": "field",
              "name": "margin",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "margin"
            },
            {
              "kind": "field",
              "name": "autoMargin",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "a-margin"
            }
          ],
          "attributes": [
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "color"
            },
            {
              "name": "border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "border"
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "error"
            },
            {
              "name": "success",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "success"
            },
            {
              "name": "info",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "info"
            },
            {
              "name": "warning",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "warning"
            },
            {
              "name": "primary",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "primary"
            },
            {
              "name": "accent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "accent"
            },
            {
              "name": "pad",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "pad"
            },
            {
              "name": "margin",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "margin"
            },
            {
              "name": "a-margin",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "autoMargin"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "tagNameWithoutPrefix": "style",
          "tagName": "zn-style",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnStyle",
            "module": "components/style/style.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/table/table.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnTable",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fixedFirst",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "fixed-first",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasActions",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "has-actions",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headless",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "headless",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "allLeft",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "left-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "any"
              },
              "attribute": "data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "boolIcons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "bool-icons"
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "columnDisplay",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "wideColumn",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "resizing"
            },
            {
              "kind": "method",
              "name": "_handleMenu",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "menuClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "tableHead"
            },
            {
              "kind": "method",
              "name": "tableBody"
            },
            {
              "kind": "method",
              "name": "columnContent",
              "parameters": [
                {
                  "name": "col",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "fixed-first",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "fixedFirst"
            },
            {
              "name": "has-actions",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hasActions"
            },
            {
              "name": "headless",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "headless"
            },
            {
              "name": "left-align",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "allLeft"
            },
            {
              "name": "data",
              "type": {
                "text": "any"
              },
              "fieldName": "data"
            },
            {
              "name": "bool-icons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "boolIcons"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "table",
          "tagName": "zn-table",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/table\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/table",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnTable",
            "module": "components/table/table.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tabs/tabs.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnTabs",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "masterId",
              "type": {
                "text": "string"
              },
              "attribute": "master-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultUri",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "default-uri",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_current",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_split",
              "type": {
                "text": "number"
              },
              "attribute": "split",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_splitMin",
              "type": {
                "text": "number"
              },
              "default": "60",
              "attribute": "split-min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_splitMax",
              "type": {
                "text": "number"
              },
              "attribute": "split-max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryCaption",
              "type": {
                "text": "string"
              },
              "default": "'Navigation'",
              "attribute": "primary-caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "secondaryCaption",
              "type": {
                "text": "string"
              },
              "default": "'Content'",
              "attribute": "secondary-caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noPrefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-prefetch",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "localStorage",
              "type": {
                "text": "boolean"
              },
              "attribute": "local-storage",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "storeKey",
              "type": {
                "text": "string"
              },
              "attribute": "store-key"
            },
            {
              "kind": "field",
              "name": "storeTtl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "store-ttl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fetchStyle",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "fetch-style",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "full-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "paddedRight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "padded-right",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "monitor",
              "type": {
                "text": "string"
              },
              "attribute": "monitor"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "preload",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_store",
              "type": {
                "text": "Store"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_activeClicks",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_panel",
              "type": {
                "text": "Element | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_panels",
              "type": {
                "text": "Map<string, Element[]>"
              },
              "privacy": "private",
              "default": "new Map<string, Element[]>()"
            },
            {
              "kind": "field",
              "name": "_tabs",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_actions",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_knownUri",
              "type": {
                "text": "Map<string, string>"
              },
              "privacy": "private",
              "default": "new Map<string, string>()"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'bottom', 'right', 'left', 'top', 'actions')"
            },
            {
              "kind": "method",
              "name": "monitorDom"
            },
            {
              "kind": "method",
              "name": "_addPanel",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_addTab",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "reRegisterTabs"
            },
            {
              "kind": "method",
              "name": "switchTab",
              "parameters": [
                {
                  "name": "inc",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "nextTab"
            },
            {
              "kind": "method",
              "name": "previousTab"
            },
            {
              "kind": "method",
              "name": "_prepareTab",
              "parameters": [
                {
                  "name": "tabId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_uriToId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "tabUri",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createUriPanel",
              "return": {
                "type": {
                  "text": "HTMLDivElement"
                }
              },
              "parameters": [
                {
                  "name": "tabEle",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "tabUri",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "tabId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fetchUriTab",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clickTab",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "refresh",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRefTab",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setActiveTab",
              "parameters": [
                {
                  "name": "tabName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "store",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "refresh",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "refTab",
                  "default": "null",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setTabEleActive",
              "parameters": [
                {
                  "name": "ele",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "active",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectTab",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "tabName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "refresh",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getActiveTab",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "observerDom"
            },
            {
              "kind": "method",
              "name": "removeTabAndPanel",
              "parameters": [
                {
                  "name": "tabId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_registerTabs"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "master-id",
              "type": {
                "text": "string"
              },
              "fieldName": "masterId"
            },
            {
              "name": "default-uri",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "defaultUri"
            },
            {
              "name": "active",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "_current"
            },
            {
              "name": "split",
              "type": {
                "text": "number"
              },
              "fieldName": "_split"
            },
            {
              "name": "split-min",
              "type": {
                "text": "number"
              },
              "default": "60",
              "fieldName": "_splitMin"
            },
            {
              "name": "split-max",
              "type": {
                "text": "number"
              },
              "fieldName": "_splitMax"
            },
            {
              "name": "primary-caption",
              "type": {
                "text": "string"
              },
              "default": "'Navigation'",
              "fieldName": "primaryCaption"
            },
            {
              "name": "secondary-caption",
              "type": {
                "text": "string"
              },
              "default": "'Content'",
              "fieldName": "secondaryCaption"
            },
            {
              "name": "no-prefetch",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noPrefetch"
            },
            {
              "name": "local-storage",
              "type": {
                "text": "boolean"
              },
              "fieldName": "localStorage"
            },
            {
              "name": "store-key",
              "type": {
                "text": "string"
              },
              "fieldName": "storeKey"
            },
            {
              "name": "store-ttl",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "storeTtl"
            },
            {
              "name": "padded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "padded"
            },
            {
              "name": "fetch-style",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "fetchStyle"
            },
            {
              "name": "full-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "fullWidth"
            },
            {
              "name": "padded-right",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "paddedRight"
            },
            {
              "name": "monitor",
              "type": {
                "text": "string"
              },
              "fieldName": "monitor"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "fieldName": "description"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "tabs",
          "tagName": "zn-tabs",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/tabs\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/tabs",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnTabs",
            "module": "components/tabs/tabs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/textarea/textarea.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnTextarea",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The internal `<textarea>` control.",
              "name": "textarea"
            }
          ],
          "slots": [
            {
              "description": "The textareas label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.",
              "name": "label-tooltip"
            },
            {
              "description": "Used to add contextual text that is displayed above the textarea, on the right. Alternatively, you can use the `context-note` attribute.",
              "name": "context-note"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: ['zn-blur', 'zn-input'] })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the textarea, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the textarea, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The text area's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "attribute": "label-tooltip"
            },
            {
              "kind": "field",
              "name": "contextNote",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the textarea, on the right, to add additional context. If you need to display HTML in this text, use the `context-note` slot instead.",
              "attribute": "context-note"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The text area's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'vertical'",
              "description": "Controls how the textarea can be resized.",
              "attribute": "resize"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the textarea.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The default value of the form control. Primarily used for resetting the form control."
            },
            {
              "kind": "field",
              "name": "transparent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "transparent"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setTextareaHeight",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleRowsChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the textarea."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the textarea."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the textarea."
            },
            {
              "kind": "method",
              "name": "scrollPosition",
              "return": {
                "type": {
                  "text": "{ top: number; left: number } | undefined"
                }
              },
              "parameters": [
                {
                  "name": "position",
                  "optional": true,
                  "type": {
                    "text": "{ top?: number; left?: number }"
                  }
                }
              ],
              "description": "Gets or sets the textarea scroll position."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "zn-blur"
            },
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "zn-change"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "zn-focus"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "zn-input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "zn-invalid"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the textarea, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the textarea, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The text area's size.",
              "fieldName": "size"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "label-tooltip",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears in a tooltip next to the label. If you need to display HTML in the tooltip, use the `label-tooltip` slot instead.",
              "fieldName": "labelTooltip"
            },
            {
              "name": "context-note",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text that appears above the textarea, on the right, to add additional context. If you need to display HTML in this text, use the `context-note` slot instead.",
              "fieldName": "contextNote"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The text area's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "fieldName": "rows"
            },
            {
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'vertical'",
              "description": "Controls how the textarea can be resized.",
              "fieldName": "resize"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "fieldName": "required"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the textarea.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "fieldName": "inputmode"
            },
            {
              "name": "transparent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "transparent"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Textareas collect data from the user and allow multiple lines of text.",
          "tagNameWithoutPrefix": "textarea",
          "tagName": "zn-textarea",
          "customElement": true,
          "jsDoc": "/**\n * @summary Textareas collect data from the user and allow multiple lines of text.\n * @documentation https://zinc.style/components/textarea\n * @status stable\n * @since 2.0\n *\n * @slot label - The textareas label. Alternatively, you can use the `label` attribute.\n * @slot label-tooltip - Used to add text that is displayed in a tooltip next to the label. Alternatively, you can use the `label-tooltip` attribute.\n * @slot context-note - Used to add contextual text that is displayed above the textarea, on the right. Alternatively, you can use the `context-note` attribute.\n * @slot help-text - Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.\n *\n * @event zn-blur - Emitted when the control loses focus.\n * @event zn-change - Emitted when an alteration to the control's value is committed by the user.\n * @event zn-focus - Emitted when the control gains focus.\n * @event zn-input - Emitted when the control receives input.\n * @event zn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @csspart form-control - The form control that wraps the label, input, and help text.\n * @csspart form-control-label - The label's wrapper.\n * @csspart form-control-input - The input's wrapper.\n * @csspart form-control-help-text - The help text's wrapper.\n * @csspart base - The component's base wrapper.\n * @csspart textarea - The internal `<textarea>` control.\n */",
          "documentation": "https://zinc.style/components/textarea",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnTextarea",
            "module": "components/textarea/textarea.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tile/tile.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnTile",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]')"
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "dataTarget",
              "type": {
                "text": "string"
              },
              "attribute": "data-target"
            },
            {
              "kind": "field",
              "name": "gaid",
              "type": {
                "text": "string"
              },
              "attribute": "gaid"
            },
            {
              "kind": "field",
              "name": "dataUri",
              "type": {
                "text": "string"
              },
              "attribute": "data-uri"
            },
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "attribute": "flush"
            },
            {
              "kind": "field",
              "name": "flushX",
              "type": {
                "text": "boolean"
              },
              "attribute": "flush-x"
            },
            {
              "kind": "field",
              "name": "flushY",
              "type": {
                "text": "boolean"
              },
              "attribute": "flush-y"
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "attribute": "inline"
            },
            {
              "kind": "method",
              "name": "_isLink",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "fieldName": "description"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "fieldName": "href"
            },
            {
              "name": "data-target",
              "type": {
                "text": "string"
              },
              "fieldName": "dataTarget"
            },
            {
              "name": "gaid",
              "type": {
                "text": "string"
              },
              "fieldName": "gaid"
            },
            {
              "name": "data-uri",
              "type": {
                "text": "string"
              },
              "fieldName": "dataUri"
            },
            {
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "fieldName": "flush"
            },
            {
              "name": "flush-x",
              "type": {
                "text": "boolean"
              },
              "fieldName": "flushX"
            },
            {
              "name": "flush-y",
              "type": {
                "text": "boolean"
              },
              "fieldName": "flushY"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "fieldName": "inline"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "tile",
          "tagName": "zn-tile",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/tile\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/tile",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnTile",
            "module": "components/tile/tile.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tile-property/tile-property.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnTileProperty",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "attribute": "icon",
              "reflects": true
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "fieldName": "description"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "fieldName": "icon"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "tile-property",
          "tagName": "zn-tile-property",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/tile-property\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/tile-property",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnTileProperty",
            "module": "components/tile-property/tile-property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/timer/timer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnTimer",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "timestamp",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "attribute": "timestamp"
            },
            {
              "kind": "method",
              "name": "_getLastMessage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getTimes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "timestamp",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "timestamp"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "timer",
          "tagName": "zn-timer",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/timer\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/timer",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnTimer",
            "module": "components/timer/timer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/toggle/toggle.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnToggle",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { value: (control: ZnToggle) => (control.checked ? control.value || 'on' : undefined), defaultValue: (control: ZnToggle) => control.defaultChecked, setValue: (control: ZnToggle, checked: boolean) => (control.checked = checked) })"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "fallbackValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "fallback"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "triggerSubmit",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "trigger-submit"
            },
            {
              "kind": "field",
              "name": "onText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "on-text"
            },
            {
              "kind": "field",
              "name": "offText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "off-text"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "click"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "method",
              "name": "checkValidity"
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "title"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "fallback",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "fallbackValue"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "helpText"
            },
            {
              "name": "trigger-submit",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "triggerSubmit"
            },
            {
              "name": "on-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "onText"
            },
            {
              "name": "off-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "offText"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "toggle",
          "tagName": "zn-toggle",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/toggle\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/toggle",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnToggle",
            "module": "components/toggle/toggle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tooltip/tooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnTooltip",
          "slots": [
            {
              "description": "The content of the tooltip",
              "name": ""
            },
            {
              "description": "The anchor the tooltip is attached to.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "Popup"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' |\n    'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "4",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "attribute": "trigger"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "hoist"
            },
            {
              "kind": "method",
              "name": "hasTrigger",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggerType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            }
          ],
          "events": [
            {
              "description": "Emitted when the tooltip is shown.",
              "name": "zn-show"
            },
            {
              "description": "Emitted after the tooltip is shown.",
              "name": "zn-after-show"
            },
            {
              "description": "Emitted when the tooltip is hidden.",
              "name": "zn-hide"
            },
            {
              "description": "Emitted after the tooltip is hidden.",
              "name": "zn-after-hide"
            }
          ],
          "attributes": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "content"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' |\n    'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "fieldName": "placement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "4",
              "fieldName": "distance"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "skidding"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "fieldName": "trigger"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "The Tooltip component is used to display additional information when a user hovers over or clicks\non an element.",
          "tagNameWithoutPrefix": "tooltip",
          "tagName": "zn-tooltip",
          "customElement": true,
          "jsDoc": "/**\n * @summary The Tooltip component is used to display additional information when a user hovers over or clicks\n * on an element.\n *\n * @documentation https://zinc.style/components/tooltip\n * @status experimental\n * @since 1.0\n *\n * @event zn-show - Emitted when the tooltip is shown.\n * @event zn-after-show - Emitted after the tooltip is shown.\n * @event zn-hide - Emitted when the tooltip is hidden.\n * @event zn-after-hide - Emitted after the tooltip is hidden.\n *\n * @slot - The content of the tooltip\n * @slot anchor - The anchor the tooltip is attached to.\n */",
          "documentation": "https://zinc.style/components/tooltip",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnTooltip",
            "module": "components/tooltip/tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/vertical-stepper/vertical-stepper.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnVerticalStepper",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "last",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "last",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "first",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "first",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "attribute": "caption",
              "reflects": true
            }
          ],
          "events": [
            {
              "description": "Emitted as an example.",
              "name": "zn-event-name"
            }
          ],
          "attributes": [
            {
              "name": "last",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "last"
            },
            {
              "name": "first",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "first"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "fieldName": "description"
            },
            {
              "name": "caption",
              "type": {
                "text": "string"
              },
              "fieldName": "caption"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "vertical-stepper",
          "tagName": "zn-vertical-stepper",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/vertical-stepper\n * @status experimental\n * @since 1.0\n *\n * @dependency zn-example\n *\n * @event zn-event-name - Emitted as an example.\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://zinc.style/components/vertical-stepper",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "zn-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnVerticalStepper",
            "module": "components/vertical-stepper/vertical-stepper.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/well/well.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ZnWell",
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, '[default]', 'action')"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "icon"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "fieldName": "inline"
            }
          ],
          "superclass": {
            "name": "ZincElement",
            "module": "/src/internal/zinc-element"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "well",
          "tagName": "zn-well",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://zinc.style/components/well\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot.\n */",
          "documentation": "https://zinc.style/components/well",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ZnWell",
            "module": "components/well/well.js"
          }
        }
      ]
    }
  ],
  "package": {
    "name": "@kubex/zinc",
    "description": "A collection of web components for building web applications based off of @shoelace-style/Shoelace",
    "version": "1.0.4",
    "author": "",
    "license": "MIT"
  }
}
